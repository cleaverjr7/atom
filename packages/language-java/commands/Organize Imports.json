{
  "beforeRunningCommand": "saveActiveFile",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -w\n#\n# WARNING: This script modifies the source of your file!!!  No one but\n# yourself is responsible for it losing code.\n#\n# Provides an Eclipse like Organize Imports except it can't\n# add imports.  It cleans up the list by filtering out unused\n# imports and alphabetizing the used.\n#\n# * alphabetizes imports placing java.* and javax.* before others.\n# * removes unused imports.\n# * maintains any \"package.*;\" imports and static imports\n# * supports class names starting with lowercase characters (legacy code)\n#\n# TODO add proper support for /* */ comments.  Since these can be part of the line we can't ignore these lines\n\nbefore, imports, after, all = [], [], [], []\n\nclass_defined = false\n\nSTDIN.each do |line|\n  all << line\n  \n  if line =~ / (class|(@)?interface) / && !(line =~ %r{^\\s*(//|\\*)})\n    class_defined = true\n    \n    after << line\n  elsif line =~ /\\s*^import /\n    imports << line.strip\n  elsif imports.empty? && !class_defined\n    before << line\n  elsif !imports.empty? && after.empty?\n    # remove empty lines after the imports and before anything else\n    after << line unless line.strip.empty?\n  elsif\n    after << line\n  end\nend\n\nif imports.empty?\n  # if there are no imports just output the original lines and exit\n  all.each { |line| puts line }\n  exit 0\nend\n\nclasses = {}\nimports.each do |import|\n  import.scan(/\\s*import\\s+([A-Za-z0-9.]+)\\.([a-zA-Z0-9]+);/) do |package, name|\n    classes[name] = { :package => package }\n  end\nend\n\nafter.each do |line|\n  next if line =~ %r{^\\s*(//|/\\*|\\*)} #comments\n  \n  # Attempt to find all classes in the file.  This is loose in that it\n  # accepts words with lowercase letters and identifies them as classes.  This is OK\n  # since it won't add imports, it's only used to determine if an existing import\n  # is valid.\n  line.scan(/\\b([A-Za-z]\\w*)(\\b|\\.)/) do |name, boundary|\n    classes[name][:used] = 1 if classes[name]\n  end\nend\n\n# Based upon the classes found in the file determine the used imports\nnon_static_imports, static_imports = [], []\nclasses.each_pair do |name, class_info|\n  if class_info[:used]\n    non_static_imports << \"import #{class_info[:package]}.#{name};\"\n  end\nend\n\n# Include any .* imports and static imports since they can't be validated\nimports.each do |import|\n  if import =~ /^import static/\n    static_imports << import\n  elsif import =~ /\\.\\*\\s*;/\n    non_static_imports << import\n  end\nend\n\n# create section comprised of the import lines attempting to remove duplicate empty lines\nlast_line_was_empty, import_lines = before.last.strip.empty?, []\n\nunless static_imports.empty?\n  import_lines << '' unless last_line_was_empty\n  import_lines.push(*static_imports.uniq)\n  last_line_was_empty = false\nend\n\n# Sort according to the default eclipse sort.\nsort_order = [\n  [/^import /, 4], # everything else\n  [/^import com\\./, 3],\n  [/^import org\\./, 2],\n  [/^import javax\\./, 1], \n  [/^import java\\./, 0],\n]\n\nsorted = non_static_imports.uniq.sort do |a, b|\n  a_group, b_group = sort_order[0][1], sort_order[0][1]\n  \n  sort_order.each do |x|\n    a_group = x[1] if (a.match(x[0]))\n    b_group = x[1] if (b.match(x[0]))\n  end\n  \n  if a_group != b_group\n    # sort by group\n    result = a_group <=> b_group\n  else\n    # in the same group, sort by text\n    result = a <=> b\n  end\n  \n  result\nend\n\ncur_regex = nil\n\n[[\"\"], sorted, [\"\"]].flatten.each do |line|\n  next if last_line_was_empty && line.strip.empty? # prevent multiple empty lines\n  \n  old_regex = cur_regex\n  sort_order.each do |x|\n    cur_regex = x[0] if (line.match(x[0]))\n  end\n  import_lines << '' if old_regex && cur_regex && old_regex != cur_regex\n  \n  last_line_was_empty = line.strip.empty? \n  import_lines << line\nend\n\n[before, import_lines, after].flatten.each do |line|\n  puts line\nend\n",
  "input": "selection",
  "keyEquivalent": "^#",
  "name": "Organize Imports",
  "output": "replaceSelectedText",
  "scope": "source.java"
}
