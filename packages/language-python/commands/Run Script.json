{
  "autoScrollOutput": true,
  "beforeRunningCommand": "saveModifiedFiles",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\nrequire ENV[\"TM_SUPPORT_PATH\"] + \"/lib/tm/executor\"\nrequire ENV[\"TM_SUPPORT_PATH\"] + \"/lib/tm/save_current_document\"\n\nTextMate.save_if_untitled('py')\nTextMate::Executor.make_project_master_current_document\n\nENV[\"PYTHONPATH\"] = ENV[\"TM_BUNDLE_SUPPORT\"] + (ENV.has_key?(\"PYTHONPATH\") ? \":\" + ENV[\"PYTHONPATH\"] : \"\")\n\nis_test_script = ENV[\"TM_FILEPATH\"] =~ /(?:\\b|_)(?:test)(?:\\b|_)/ or\n                 File.read(ENV[\"TM_FILEPATH\"]) =~ /\\bimport\\b.+(?:unittest)/\n\nTextMate::Executor.run(ENV[\"TM_PYTHON\"] || \"python\", \"-u\", ENV[\"TM_FILEPATH\"], :use_hashbang => !ENV.has_key?('TM_PYTHON')) do |str, type|\n  if is_test_script and type == :err\n    if str =~ /\\A[\\.F]*\\Z/\n      str.gsub!(/(\\.|F)/, \"<span class=\\\"test ok\\\">\\\\1</span>\")\n      str + \"<br/>\\n\"\n    elsif str =~ /\\A(FAILED.*)\\Z/\n      \"<div class=\\\"test fail\\\">#{htmlize $1}</div>\\n\"\n    elsif str =~ /\\A(OK.*)\\Z/\n      \"<div class=\\\"test ok\\\">#{htmlize $1}</div>\\n\"\n    elsif str =~ /^(\\s+)File \"(.+)\", line (\\d+), in (.*)/\n      indent = $1\n      file   = $2\n      line   = $3\n      method = $4\n      indent += \" \" if file.sub!(/^\\\"(.*)\\\"/,\"\\1\")\n      url = \"&amp;url=file://\" + e_url(file)\n      display_name = ENV[\"TM_DISPLAYNAME\"]\n      \"#{htmlize(indent)}<a class=\\\"near\\\" href=\\\"txmt://open?line=#{line + url}\\\">\" +\n        (method ? \"method #{CGI::escapeHTML method}\" : \"<em>at top level</em>\") +\n        \"</a> in <strong>#{CGI::escapeHTML display_name}</strong> at line #{line}<br/>\\n\"\n    end\n  end\nend",
  "input": "document",
  "inputFormat": "text",
  "keyEquivalent": "@r",
  "name": "Run Script",
  "outputCaret": "afterOutput",
  "outputFormat": "html",
  "outputLocation": "newWindow",
  "scope": "source.python",
  "semanticClass": "process.run.script.python",
  "version": 2
}
