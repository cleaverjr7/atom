{
  "beforeRunningCommand": "nop",
  "command": "#!/usr/bin/env python -S\n# coding: utf-8\n\n# This program takes in the name of one of python's special methods, and\n# spits a snippet out.  If the name is unknown, make a regular (non-magic)\n# method/function\n\n# these functions take no argument except 'self'\nselfList = (\n    'del', 'repr', 'str', 'hash', 'nonzero', 'unicode', 'len', 'iter', 'neg',\n    'pos', 'abs', 'invert', 'complex', 'int', 'long', 'float', 'oct', 'hex',\n    'index', 'enter'\n)\n# these binary operators take both 'self' and 'other' as arguments\nselfOtherList = (\n 'lt', 'le', 'eq', 'ne', 'gt', 'ge', 'cmp', 'add', 'sub', 'mul', 'floordiv',\n 'mod', 'divmod', 'lshift', 'rshift', 'and', 'xor', 'or', 'div', 'truediv',\n 'radd', 'rsub', 'rmul', 'rdiv', 'rtruediv', 'rfloordiv', 'rmod', 'rdivmod',\n 'rpow', 'rlshift', 'rrshift', 'rand', 'rxor', 'ror', 'iadd', 'isub', 'imul',\n 'idiv', 'itruediv', 'ifloordiv', 'imod', 'ilshift', 'irshift', 'iand',\n 'ixor', 'ior', 'coerce', 'pow', 'ipow'\n)\n# these functions take some argument(s) other than self\nselfAndMore = {\n         'getattr' : 'name',\n         'delattr' : 'name',\n    'getattribute' : 'name',\n         'setattr' : 'name, value',\n         'getitem' : 'key',\n         'delitem' : 'key',\n         'setitem' : 'key, value',\n             'get' : 'instance, owner',\n             'set' : 'instance, value',\n          'delete' : 'instance',\n        'contains' : 'item',\n        'setslice' : 'i, j, sequence',\n        'delslice' : 'i, j',\n            'exit' : 'exc_type, exc_value, traceback',\n}\n\nsPass = '\\t${4/.+/\"\"\"/}${4:docstring for %s}${4/.+/\"\"\"\\n/}${4/.+/\\t/}${0:pass}'\n\ndef defLine(func, args):\n    return ''.join([\"def __\", func, \"__(\", args, \"):\\n\", sPass])\n\ndef make_snippet(name):\n    if name in selfList:\n        return defLine(name, 'self')\n    \n    elif name in selfOtherList:\n        return defLine(name, 'self, other')\n    \n    elif name in selfAndMore:\n        return defLine(name, 'self, ' + selfAndMore[name])\n    \n    elif name in ('init', 'call', 'new'):\n        return defLine(name, 'self${2/([^,])?.*/(?1:, )/}${2:arg}')\n        \n    else:\n        return ''.join(['def ', name, '(${3:self${2/([^,])?.*/(?1:, )/}${2:arg}}):\\n', sPass % name])\n\n# actually print the thing out, using the current word in TM\nfrom os import environ as env\nfrom sys import exit\ntry:\n    print make_snippet(env['TM_CURRENT_WORD'])\nexcept KeyError:\n    print 'Please type the new function\\'s name\\n(you can also use defâ‡¥).'\n    exit(206)",
  "fallbackInput": "word",
  "input": "selection",
  "keyEquivalent": "$\r",
  "name": "New Method/Function",
  "output": "insertAsSnippet",
  "scope": "source.python"
}
