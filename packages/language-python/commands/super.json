{
  "beforeRunningCommand": "nop",
  "command": "#!/usr/bin/env python\nimport sys\nimport os\nimport ast\n\n\n\nLINE = int(os.getenv('TM_LINE_NUMBER'))\nCOL = int(os.getenv('TM_LINE_INDEX'))\n\nsource_lines = sys.stdin.readlines()\n\nline = source_lines[LINE-1]\nsource_lines[LINE-1] = line[:COL] + 'super' + line[COL:]\nsource = ''.join(source_lines)\n\nclass SuperVisitor(ast.NodeVisitor):\n\t\n\tcurrent_func = None\n\tcurrent_args = None\n\tsnippet = None\n\t\n\tdef __init__(self, current_class=None):\n\t\tself.current_class = current_class\n\t\n\tdef generic_visit(self, node):\n\t\tif getattr(node, 'lineno', -1) >= LINE and getattr(node, 'col_offset', -1) >= COL:\n\t\t\t# We just passed the node we're looking for, last snippet must be it\n\t\t\tprint SuperVisitor.snippet\n\t\t\tsys.exit()\n\t\tself_str = \"self\"\n\t\targ_strs = []\n\t\tif self.current_args:\n\t\t\ttab_marker = 4\n\t\t\tif self.current_args.args:\n\t\t\t\tself_str = getattr(self.current_args.args[0],'id', 'self')\n\t\t\t\tfor arg in self.current_args.args[1:]:\n\t\t\t\t\targ_strs.append(\"${%d:%s}\" % (tab_marker, arg.id))\n\t\t\t\t\ttab_marker += 1\n\t\t\tif self.current_args.vararg:\n\t\t\t\targ_strs.append(\"${%d:*%s}\" % (tab_marker, self.current_args.vararg))\n\t\t\t\ttab_marker += 1\n\t\t\tif self.current_args.kwarg:\n\t\t\t\targ_strs.append(\"${%d:**%s}\" % (tab_marker, self.current_args.kwarg))\n\t\t\t\ttab_marker += 1\n\t\t\t\t\n\t\t\t\t\n\t\tSuperVisitor.snippet = \"super(${1:%s}, ${2:%s}).${3:%s}(%s)\"%(\n\t\t\tgetattr(self.current_class, 'name', 'BaseClass'), \n\t\t\tself_str, \n\t\t\tgetattr(self.current_func, 'name', 'function_name'),\n\t\t\t', '.join(arg_strs)\n\t\t)\n\t\treturn super(SuperVisitor, self).generic_visit(node)\n\t\n\t# 'arguments' always means function argspecs (never call args)\n\tdef visit_arguments(self, node):\n\t\tif not self.current_args and self.current_class and self.current_func:\n\t\t\tself.current_args = node\n\t\treturn self.generic_visit(node)\n\t\n\tdef visit_FunctionDef(self, node):\n\t\tif not self.current_func:\n\t\t\tself.current_func = node\n\t\t\treturning = self.generic_visit(node)\n\t\t\tself.current_func = None\n\t\t\tself.current_args = None\n\t\treturn self.generic_visit(node)\n\t\n\tdef visit_ClassDef(self, node):\n\t\treturn SuperVisitor(node).generic_visit(node)\n\t\n\nSuperVisitor().visit(ast.parse(source))",
  "input": "document",
  "name": "super",
  "output": "insertAsSnippet",
  "scope": "source.python",
  "tabTrigger": "super"
}
