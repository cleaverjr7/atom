{
  "beforeRunningCommand": "nop",
  "bundleUUID": "4679484F-6227-11D9-BFB1-000D93589AF6",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\n\n\n\nrequire ENV['TM_SUPPORT_PATH'] + \"/lib/exit_codes\"\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/escape\"\nif ENV['DIALOG'] =~ /2$/\n  require \"#{ENV['TM_BUNDLE_SUPPORT']}/objc_completion2\"\nelse\n  require \"#{ENV['TM_BUNDLE_SUPPORT']}/objc_completion\"\nend\n\ndef stripComments(line)\n  line.gsub(/((['\"])(?:\\\\.|.)*?\\2)|\\/\\*.*?\\*\\/|\\/\\/[^\\n\\r]*/m) do |s| \n    if $1\n      s\n    else\n      s.split(\"\\n\").map{|e| ' ' * e.length() }.join(\"\\n\")\n    end\n  end\nend\n\nclass String\n  def index_of_nth_occurrence_of(n, ch)\n    self.unpack(\"U*\").each_with_index do |e, i|\n      return i if e == ch && (n -= 1) == 0\n    end\n    return -1\n  end\nend\n\ndef caret_position(line)\n  tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i\n  if tmp > 0\n    caret_placement = line.index_of_nth_occurrence_of(tmp,?\\n) + ENV['TM_LINE_INDEX'].to_i\n  else\n    caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1\n  end\nend\n\nif ENV['TERMINAL_MATE_NEW']\n  class ObjCMethodCompletion\n    def show_dialog(prettyCandidates,start,&snip_gen)\n      require \"#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist\"\n      pl = {'menuItems' => prettyCandidates.map { |pretty, junk, full | { 'title' => pretty, 'cand' => full} }}\n      pl.to_plist\n      res = pl['menuItems'][0]\n      snip_gen.call( res['cand'], start )\n    end\n  end\n  \n  class TextMateEarlyExitException < RuntimeError\n  end\n  \n  module TextMate\n    module_function\n    def exit_show_tool_tip(out = nil)\n      print out if out\n      raise TextMateEarlyExitException, \"show tool kit\"\n    end\n    \n    def exit_discard(out = nil)\n      print out if out\n      raise TextMateEarlyExitException, \"exit discard\"\n    end\n  end\n  \n  \n  \n  tc = [\n  {:tmVars => {'TM_LINE_NUMBER' => '19', 'TM_INPUT_START_LINE' => '19', 'TM_LINE_INDEX' => '8', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[self ad]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '20', 'TM_INPUT_START_LINE' => '20', 'TM_LINE_INDEX' => '20', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[[NSStrig alloc] ini]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '19', 'TM_INPUT_START_LINE' => '19', 'TM_LINE_INDEX' => '8', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[self adbl]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '21', 'TM_INPUT_START_LINE' => '21', 'TM_LINE_INDEX' => '26', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[NSObject isKindOfClass:NS]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '22', 'TM_INPUT_START_LINE' => '22', 'TM_LINE_INDEX' => '18', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '23', 'TM_INPUT_START_LINE' => '23', 'TM_LINE_INDEX' => '22', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for for]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '24', 'TM_INPUT_START_LINE' => '24', 'TM_LINE_INDEX' => '21', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for + ]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '25', 'TM_INPUT_START_LINE' => '25', 'TM_LINE_INDEX' => '5', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj ]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '26', 'TM_INPUT_START_LINE' => '26', 'TM_LINE_INDEX' => '7', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[NSObje]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '27', 'TM_INPUT_START_LINE' => '27', 'TM_LINE_INDEX' => '5', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj ]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '28', 'TM_INPUT_START_LINE' => '28', 'TM_LINE_INDEX' => '6', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj t]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '11','TM_INPUT_START_LINE' => '11','TM_LINE_INDEX' => '11','TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj t:b:av]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '30', 'TM_INPUT_START_LINE' => '30', 'TM_LINE_INDEX' => '19', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString ]]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '31', 'TM_INPUT_START_LINE' => '31', 'TM_LINE_INDEX' => '30', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@\"eu\" ]]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '32', 'TM_INPUT_START_LINE' => '32', 'TM_LINE_INDEX' => '35', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@\"eu\" forYo]]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '33', 'TM_INPUT_START_LINE' => '33', 'TM_LINE_INDEX' => '40', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@\"eu\" forYou:sel]]'},\n  {:tmVars => {'TM_LINE_NUMBER' => '34', 'TM_INPUT_START_LINE' => '34', 'TM_LINE_INDEX' => '26', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj postNotificationName: object:NSString *]'},\n  {:tmVars => {'TM_LINE_NUMBER'=> '7','TM_INPUT_START_LINE'=> '6','TM_LINE_INDEX'=> '55', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => \"[[NSNotificationCenter defaultCenter] addObserver:self\\n                        selector:@selector(colorPicker:) ]\"}]\n\n  \n  ENV['TM_BUNDLE_SUPPORT'] = \"/Library/Application Support/TextMate/Bundles/Objective-C.tmbundle/Support\"\n  tc.each do |element|\n    element[:tmVars].each do |key,value|\n      ENV[key] = value\n    end\n    caret_placement = caret_position(element[:line])\nbegin\n    res = ObjCMethodCompletion.new(element[:line] , caret_placement).print\nrescue NoMethodError => boom\n\n  puts \"error in:\" + element.inspect\n\n  puts boom\n  \nrescue TextMateEarlyExitException => boom\n  puts \"Early Exit\"\nend\n  \n  end\n  \nelse\nline = STDIN.read\ncaret_placement = caret_position(line)\nif ENV['TM_SCOPE'].include? \"meta.bracketed.objc\"\n  res, os = ObjCMethodCompletion.new(stripComments(line) , caret_placement).print\nelse\n  res = ObjCFallbackCompletion.new(stripComments(line) , caret_placement).print\n  os = 0\nend\nif res\n  print e_sn(line[0..caret_placement]) + res + e_sn(line[caret_placement + 1 + os..-1]) \nelse\n  TextMate.exit_discard\nend\nend\n",
  "disableOutputAutoIndent": true,
  "fallbackInput": "scope",
  "input": "selection",
  "keyEquivalent": "~\u001b",
  "name": "Completion: Inside Brackets",
  "output": "insertAsSnippet",
  "scope": "meta.function-with-body.objc | meta.bracketed.objc"
}
