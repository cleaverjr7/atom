{
  "beforeRunningCommand": "nop",
  "bundleUUID": "4679484F-6227-11D9-BFB1-000D93589AF6",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/escape\"\n\nline = STDIN.read\noffset = ENV['TM_INPUT_START_COLUMN'].to_i - 1\ncaret_placement = 0\ntmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i\nif tmp > 0\nclass String\n  def index_of_nth_occurrence_of(n, ch)\n    self.unpack(\"U*\").each_with_index do |e, i|\n      return i if e == ch && (n -= 1) == 0\n    end\n    return -1\n  end\nend\n  caret_placement += line.index_of_nth_occurrence_of(tmp,?\\n) + ENV['TM_LINE_INDEX'].to_i\nelse\n  caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1\nend\n\ndef match_iter(rgxp,str)\n  offset = 0\n  while m = str.match(rgxp)\n    yield [m[0], m.begin(0) + offset, m[0].length]\n    str = m.post_match\n    offset += m.end(0)\n  end\nend\n\npat = /(\"(\\\\.|[^\"\\\\])*\"|\\[|\\]|@selector\\([^\\)]*\\)|[a-zA-Z][a-zA-Z0-9]*:)/\nup = 0\nlist = []\n\nup = 0\npat = /(\"(\\\\.|[^\"\\\\])*\"|\\[|\\]|@selector\\([^\\)]*\\)|[a-zA-Z][a-zA-Z0-9]*:)/\nstart = [0]\nmatch_iter(pat , line[0..caret_placement]) do |tok, beg, len|\n  t = tok[0].chr\n  if t == \"[\"\n    start << beg\n  elsif t == \"]\"\n    start.pop\n  end\nend\n\n\nup = 0\nlast = line.length\nmatch_iter(pat , line[caret_placement+1..line.length]) do |tok, beg, len|\n  t = tok[0].chr\n  if t == \"[\"\n    up +=1\n  elsif t == \"]\"\n    if up == 0\n      last = beg + caret_placement + 1\n      break\n    end\n    up -=1\n  end\nend\n\nlist = []\nprefix = \"\"\nprefix = line[0..start[-1]-1] unless start[-1] == 0\nsuffix = line[last+1..-1]\nl = line[start[-1]..last]\nup = -1\n\nmatch_iter(pat , l) do |tok, beg, len|\n  t = tok[0].chr\n  if t == \"[\"\n    up +=1\n  elsif t == \"]\"\n    up -=1\n  elsif t !='\"' and t !='@' and up == 0\n    list << [beg,len]\n  end\nend\n\nlist << [l.length,0]\noffset += start[-1]\nif list.length > 2\n  print e_sn(prefix+ l[0...list[1][0]].strip)\n  #check to if the first \"selector:\" is not in the first line\n  if k = line[0...start[-1]+list[0][0]].rindex(\"\\n\")\n    firstIndex = list[0][0]+list[0][1]- k -1\n    offset = start[-1]\n  else\n    firstIndex = list[0][0] + list[0][1] \n  end\n  (1..(list.length() -2)).each do |ind|\n    list[ind][1]+list[ind][0]\n    b = (b = firstIndex-list[ind][1]+offset) > 0 ? b : 0\n    print e_sn(\"\\n\" + \" \"*b + l[(list[ind][0])...(list[ind+1][0])].strip)\n  end\n  print e_sn(suffix) unless suffix.nil?\nelse\n  print e_sn(line)\nend\n",
  "fallbackInput": "scope",
  "input": "selection",
  "keyEquivalent": "^q",
  "name": "Reformat Method Call",
  "output": "replaceSelectedText",
  "scope": "meta.bracketed.objc"
}
