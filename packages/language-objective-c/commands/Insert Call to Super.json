{
  "beforeRunningCommand": "nop",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\n\n# Inserts a [super method] call suitable for the current method.\n# \n# The command is inserted as a snippet with each parameter as a tabstop\n# An opening bracket is inserted if necessary, and a semicolon is\n# added after the closing bracket if there is nothing else on the line.\n# \n# The command uses heuristics to find which method implementation is\n# being edited. It should be reasonably tolerant to various coding styles,\n# including different bracket and indentation styles.\n\nproto_re = /\n            ^\\s*                # Start of the line and optional space\n            [+-]\\s*             # a plus or minus for method specifier\n            \\([^)]+\\)           # the return type in brackets\n            ((?:\\n|[^{])*)     \n            (?m:.*?)         \n            \\{                  \n          /x\n\nprevious_lines  = STDIN.readlines[1..ENV['TM_LINE_NUMBER'].to_i - 1]\ninvocation_line = previous_lines[-1]\nproto = previous_lines.join.scan(proto_re)[-1]\n\nexit if proto.nil? or proto.empty?\n\nlast_proto_sel_with_types = proto[0].strip.sub(/^\\s+/, '').sub(%r{\\s*//.*$}, '').gsub(/\\n\\s*/, ' ')\n\ntabstop = 0\n\nlast_proto_sel_with_types.gsub!(/\\([^)]+\\)\\s*(([A-Za-z0-9_][A-Za-z0-9_]*))/) do |match|\n  %Q{${#{tabstop += 1}:#$1}}\nend\n\nprint '[' if invocation_line[ENV[\"TM_LINE_INDEX\"].to_i - 1] != ?[\nprint 'super '\nprint last_proto_sel_with_types\nprint \"]\"\nprint \";\" if invocation_line =~ /^\\s+$/\n",
  "fallbackInput": "scope",
  "input": "document",
  "name": "Insert Call to Super",
  "output": "insertAsSnippet",
  "scope": "source.objc meta.scope.implementation, source.objc++ meta.scope.implementation",
  "tabTrigger": "super"
}
