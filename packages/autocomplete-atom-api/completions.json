{"Atom":[{"name":"clipboard","text":"clipboard","description":"A {Clipboard} instance ","leftLabel":"Clipboard","type":"property"},{"name":"commands","text":"commands","description":"A {CommandRegistry} instance ","leftLabel":"CommandRegistry","type":"property"},{"name":"config","text":"config","description":"A {Config} instance ","leftLabel":"Config","type":"property"},{"name":"contextMenu","text":"contextMenu","description":"A {ContextMenuManager} instance ","leftLabel":"ContextMenuManager","type":"property"},{"name":"deserializers","text":"deserializers","description":"A {DeserializerManager} instance ","leftLabel":"DeserializerManager","type":"property"},{"name":"grammars","text":"grammars","description":"A {GrammarRegistry} instance ","leftLabel":"GrammarRegistry","type":"property"},{"name":"keymaps","text":"keymaps","description":"A {KeymapManager} instance ","leftLabel":"KeymapManager","type":"property"},{"name":"menu","text":"menu","description":"A {MenuManager} instance ","leftLabel":"MenuManager","type":"property"},{"name":"packages","text":"packages","description":"A {PackageManager} instance ","leftLabel":"PackageManager","type":"property"},{"name":"project","text":"project","description":"A {Project} instance ","leftLabel":"Project","type":"property"},{"name":"styles","text":"styles","description":"A {StyleManager} instance ","leftLabel":"StyleManager","type":"property"},{"name":"themes","text":"themes","description":"A {ThemeManager} instance ","leftLabel":"ThemeManager","type":"property"},{"name":"tooltips","text":"tooltips","description":"A {TooltipManager} instance ","leftLabel":"TooltipManager","type":"property"},{"name":"views","text":"views","description":"A {ViewRegistry} instance ","leftLabel":"ViewRegistry","type":"property"},{"name":"workspace","text":"workspace","description":"A {Workspace} instance ","leftLabel":"Workspace","type":"property"},{"name":"beep","text":"beep()","snippet":null,"description":"Visually and audibly trigger a beep. ","type":"method"},{"name":"center","text":"center()","snippet":null,"description":"Move current window to the center of the screen. ","type":"method"},{"name":"close","text":"close()","snippet":null,"description":"Close the current window. ","type":"method"},{"name":"confirm","text":null,"snippet":"confirm(${1:options})","description":"A flexible way to open a dialog akin to an alert dialog.","leftLabel":"Number","type":"method"},{"name":"executeJavaScriptInDevTools","text":"executeJavaScriptInDevTools()","snippet":null,"description":"Execute code in dev tools. ","type":"method"},{"name":"focus","text":"focus()","snippet":null,"description":"Focus the current window. ","type":"method"},{"name":"getPosition","text":"getPosition()","snippet":null,"description":"Get the position of current window.","leftLabel":"Object","type":"method"},{"name":"getSize","text":"getSize()","snippet":null,"description":"Get the size of current window.","leftLabel":"Object","type":"method"},{"name":"getVersion","text":"getVersion()","snippet":null,"description":"Get the version of the Atom application.","leftLabel":"String","type":"method"},{"name":"getWindowLoadTime","text":"getWindowLoadTime()","snippet":null,"description":"Get the time taken to completely load the current window.","leftLabel":"Number","type":"method"},{"name":"hide","text":"hide()","snippet":null,"description":"Hide the current window. ","type":"method"},{"name":"inDevMode","text":"inDevMode()","snippet":null,"description":"Is the current window in development mode? ","type":"method"},{"name":"inSafeMode","text":"inSafeMode()","snippet":null,"description":"Is the current window in safe mode? ","type":"method"},{"name":"inSpecMode","text":"inSpecMode()","snippet":null,"description":"Is the current window running specs? ","type":"method"},{"name":"isFullScreen","text":"isFullScreen()","snippet":null,"description":"Is the current window in full screen mode? ","type":"method"},{"name":"isMaximixed","text":"isMaximixed()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isReleasedVersion","text":"isReleasedVersion()","snippet":null,"description":"Determine whether the current version is an official release. ","type":"method"},{"name":"onDidBeep","text":null,"snippet":"onDidBeep(${1:callback})","description":"Invoke the given callback whenever {::beep} is called.","leftLabel":"Disposable","type":"method"},{"name":"onDidThrowError","text":null,"snippet":"onDidThrowError(${1:callback})","description":"Invoke the given callback whenever there is an unhandled error.","leftLabel":"Disposable","type":"method"},{"name":"onWillThrowError","text":null,"snippet":"onWillThrowError(${1:callback})","description":"Invoke the given callback when there is an unhandled error, but\nbefore the devtools pop open","leftLabel":"Disposable","type":"method"},{"name":"open","text":null,"snippet":"open(${1:options})","description":"Open a new Atom window using the given options.","type":"method"},{"name":"openDevTools","text":"openDevTools()","snippet":null,"description":"Open the dev tools for the current window. ","type":"method"},{"name":"pickFolder","text":null,"snippet":"pickFolder(${1:callback})","description":"Prompt the user to select one or more folders.","type":"method"},{"name":"reload","text":"reload()","snippet":null,"description":"Reload the current window. ","type":"method"},{"name":"setFullScreen","text":"setFullScreen()","snippet":null,"description":"Set the full screen state of the current window. ","type":"method"},{"name":"setPosition","text":null,"snippet":"setPosition(${1:x}, ${2:y})","description":"Set the position of current window.","type":"method"},{"name":"setSize","text":null,"snippet":"setSize(${1:width}, ${2:height})","description":"Set the size of current window.","type":"method"},{"name":"show","text":"show()","snippet":null,"description":"Show the current window. ","type":"method"},{"name":"toggleDevTools","text":"toggleDevTools()","snippet":null,"description":"Toggle the visibility of the dev tools for the current window. ","type":"method"},{"name":"toggleFullScreen","text":"toggleFullScreen()","snippet":null,"description":"Toggle the full screen state of the current window. ","type":"method"}],"BufferedNodeProcess":[{"name":"constructor","text":null,"snippet":"constructor(${1:options})","description":"Runs the given Node script by spawning a new child process.","type":"method"}],"BufferedProcess":[{"name":"constructor","text":null,"snippet":"constructor(${1:options})","description":"Runs the given command by spawning a new child process.","type":"method"},{"name":"kill","text":"kill()","snippet":null,"description":"Terminate the process. ","type":"method"},{"name":"onWillThrowError","text":null,"snippet":"onWillThrowError(${1:callback})","description":"Will call your callback when an error will be raised by the process.\nUsually this is due to the command not being available or not on the PATH.\nYou can call `handle()` on the object passed to your callback to indicate\nthat you have handled this error.","leftLabel":"Disposable","type":"method"}],"Clipboard":[{"name":"read","text":"read()","snippet":null,"description":"Read the text from the clipboard.","leftLabel":"String","type":"method"},{"name":"readWithMetadata","text":"readWithMetadata()","snippet":null,"description":"Read the text from the clipboard and return both the text and the\nassociated metadata.","leftLabel":"Object","type":"method"},{"name":"write","text":null,"snippet":"write(${1:text}, ${2:metadata})","description":"Write the given text to the clipboard.","type":"method"}],"Color":[{"name":"toHexString","text":"toHexString()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"toRGBAString","text":"toRGBAString()","snippet":null,"description":"","leftLabel":"String","type":"method"}],"CommandRegistry":[{"name":"add","text":"add()","snippet":null,"description":"Add one or more command listeners associated with a selector.","leftLabel":"Disposable","type":"method"},{"name":"dispatch","text":null,"snippet":"dispatch(${1:target}, ${2:commandName})","description":"Simulate the dispatch of a command on a DOM node.","type":"method"},{"name":"findCommands","text":null,"snippet":"findCommands(${1:params})","description":"Find all registered commands matching a query.","leftLabel":"Array","type":"method"}],"CompositeDisposable":[{"name":"add","text":null,"snippet":"add(${1:disposable})","description":"Add a disposable to be disposed when the composite is disposed.","type":"method"},{"name":"clear","text":"clear()","snippet":null,"description":"Clear all disposables. They will not be disposed by the next call\nto dispose. ","type":"method"},{"name":"constructor","text":"constructor()","snippet":null,"description":"Construct an instance, optionally with one or more disposables ","type":"method"},{"name":"dispose","text":"dispose()","snippet":null,"description":"Dispose all disposables added to this composite disposable.","type":"method"},{"name":"remove","text":null,"snippet":"remove(${1:disposable})","description":"Remove a previously added disposable.","type":"method"}],"Config":[{"name":"get","text":null,"snippet":"get(${1:keyPath}, ${2:options})","description":"Retrieves the setting for the given key.","leftLabel":null,"type":"method"},{"name":"getAll","text":null,"snippet":"getAll(${1:keyPath}, ${2:options})","description":"Get all of the values for the given key-path, along with their\nassociated scope selector.","leftLabel":"Array","type":"method"},{"name":"getSchema","text":null,"snippet":"getSchema(${1:keyPath})","description":"Retrieve the schema for a specific key path. The schema will tell\nyou what type the keyPath expects, and other metadata about the config\noption.","leftLabel":"Object","type":"method"},{"name":"getSources","text":"getSources()","snippet":null,"description":"Get an {Array} of all of the `source` {String}s with which\nsettings have been added via {::set}. ","type":"method"},{"name":"getUserConfigPath","text":"getUserConfigPath()","snippet":null,"description":"Get the {String} path to the config file being used. ","type":"method"},{"name":"observe","text":null,"snippet":"observe(${1:keyPath}, ${2:options}, ${3:callback})","description":"Add a listener for changes to a given key path. This is different\nthan {::onDidChange} in that it will immediately call your callback with the\ncurrent value of the config entry.","leftLabel":"Disposable","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:keyPath}, ${2:optional}, ${3:callback})","description":"Add a listener for changes to a given key path. If `keyPath` is\nnot specified, your callback will be called on changes to any key.","leftLabel":"Disposable","type":"method"},{"name":"set","text":null,"snippet":"set(${1:keyPath}, ${2:value}, ${3:options})","description":"Sets the value for a configuration setting.","leftLabel":"Boolean","type":"method"},{"name":"transact","text":null,"snippet":"transact(${1:callback})","description":"Suppress calls to handler functions registered with {::onDidChange}\nand {::observe} for the duration of `callback`. After `callback` executes,\nhandlers will be called once if the value for their key-path has changed.","type":"method"},{"name":"unset","text":null,"snippet":"unset(${1:keyPath}, ${2:options})","description":"Restore the setting at `keyPath` to its default value.","type":"method"}],"ContextMenuManager":[{"name":"add","text":null,"snippet":"add(${1:itemsBySelector})","description":"Add context menu items scoped by CSS selectors.","type":"method"}],"Cursor":[{"name":"clearAutoscroll","text":"clearAutoscroll()","snippet":null,"description":"Prevents this cursor from causing scrolling. ","type":"method"},{"name":"clearSelection","text":"clearSelection()","snippet":null,"description":"Deselects the current selection. ","type":"method"},{"name":"compare","text":null,"snippet":"compare(${1:otherCursor})","description":"Compare this cursor's buffer position to another cursor's buffer position.","type":"method"},{"name":"getBeginningOfCurrentWordBufferPosition","text":null,"snippet":"getBeginningOfCurrentWordBufferPosition(${1:options})","description":"Retrieves the buffer position of where the current word starts.","leftLabel":"Range","type":"method"},{"name":"getBeginningOfNextWordBufferPosition","text":null,"snippet":"getBeginningOfNextWordBufferPosition(${1:options})","description":"Retrieves the buffer position of where the next word starts.","leftLabel":"Range","type":"method"},{"name":"getBufferColumn","text":"getBufferColumn()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getBufferPosition","text":"getBufferPosition()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getBufferRow","text":"getBufferRow()","snippet":null,"description":"Retrieves the cursor's current buffer row. ","type":"method"},{"name":"getCurrentBufferLine","text":"getCurrentBufferLine()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getCurrentLineBufferRange","text":null,"snippet":"getCurrentLineBufferRange(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"getCurrentParagraphBufferRange","text":"getCurrentParagraphBufferRange()","snippet":null,"description":"Retrieves the range for the current paragraph.","leftLabel":"Range","type":"method"},{"name":"getCurrentWordBufferRange","text":null,"snippet":"getCurrentWordBufferRange(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"getCurrentWordPrefix","text":"getCurrentWordPrefix()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getEndOfCurrentWordBufferPosition","text":null,"snippet":"getEndOfCurrentWordBufferPosition(${1:options})","description":"Retrieves the buffer position of where the current word ends.","leftLabel":"Range","type":"method"},{"name":"getIndentLevel","text":"getIndentLevel()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getMarker","text":"getMarker()","snippet":null,"description":"","leftLabel":"Marker","type":"method"},{"name":"getNextWordBoundaryBufferPosition","text":null,"snippet":"getNextWordBoundaryBufferPosition(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"getPreviousWordBoundaryBufferPosition","text":null,"snippet":"getPreviousWordBoundaryBufferPosition(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"getScopeDescriptor","text":"getScopeDescriptor()","snippet":null,"description":"Retrieves the scope descriptor for the cursor's current position.","leftLabel":"ScopeDescriptor","type":"method"},{"name":"getScreenColumn","text":"getScreenColumn()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getScreenPosition","text":"getScreenPosition()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getScreenRow","text":"getScreenRow()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"hasPrecedingCharactersOnLine","text":"hasPrecedingCharactersOnLine()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isAtBeginningOfLine","text":"isAtBeginningOfLine()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isAtEndOfLine","text":"isAtEndOfLine()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isBetweenWordAndNonWord","text":"isBetweenWordAndNonWord()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isInsideWord","text":null,"snippet":"isInsideWord(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"isLastCursor","text":"isLastCursor()","snippet":null,"description":"Identifies if this cursor is the last in the {TextEditor}.","leftLabel":"Boolean","type":"method"},{"name":"isSurroundedByWhitespace","text":"isSurroundedByWhitespace()","snippet":null,"description":"Identifies if the cursor is surrounded by whitespace.","leftLabel":"Boolean","type":"method"},{"name":"isVisible","text":"isVisible()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"moveDown","text":null,"snippet":"moveDown(${1:rowCount}, ${2:options})","description":"Moves the cursor down one screen row.","type":"method"},{"name":"moveLeft","text":null,"snippet":"moveLeft(${1:columnCount}, ${2:options})","description":"Moves the cursor left one screen column.","type":"method"},{"name":"moveRight","text":null,"snippet":"moveRight(${1:columnCount}, ${2:options})","description":"Moves the cursor right one screen column.","type":"method"},{"name":"moveToBeginningOfLine","text":"moveToBeginningOfLine()","snippet":null,"description":"Moves the cursor to the beginning of the buffer line. ","type":"method"},{"name":"moveToBeginningOfNextParagraph","text":"moveToBeginningOfNextParagraph()","snippet":null,"description":"Moves the cursor to the beginning of the next paragraph ","type":"method"},{"name":"moveToBeginningOfNextWord","text":"moveToBeginningOfNextWord()","snippet":null,"description":"Moves the cursor to the beginning of the next word. ","type":"method"},{"name":"moveToBeginningOfPreviousParagraph","text":"moveToBeginningOfPreviousParagraph()","snippet":null,"description":"Moves the cursor to the beginning of the previous paragraph ","type":"method"},{"name":"moveToBeginningOfScreenLine","text":"moveToBeginningOfScreenLine()","snippet":null,"description":"Moves the cursor to the beginning of the line. ","type":"method"},{"name":"moveToBeginningOfWord","text":"moveToBeginningOfWord()","snippet":null,"description":"Moves the cursor to the beginning of the word. ","type":"method"},{"name":"moveToBottom","text":"moveToBottom()","snippet":null,"description":"Moves the cursor to the bottom of the buffer. ","type":"method"},{"name":"moveToEndOfLine","text":"moveToEndOfLine()","snippet":null,"description":"Moves the cursor to the end of the buffer line. ","type":"method"},{"name":"moveToEndOfScreenLine","text":"moveToEndOfScreenLine()","snippet":null,"description":"Moves the cursor to the end of the line. ","type":"method"},{"name":"moveToEndOfWord","text":"moveToEndOfWord()","snippet":null,"description":"Moves the cursor to the end of the word. ","type":"method"},{"name":"moveToFirstCharacterOfLine","text":"moveToFirstCharacterOfLine()","snippet":null,"description":"Moves the cursor to the beginning of the first character in the\nline. ","type":"method"},{"name":"moveToNextWordBoundary","text":"moveToNextWordBoundary()","snippet":null,"description":"Moves the cursor to the next word boundary. ","type":"method"},{"name":"moveToPreviousWordBoundary","text":"moveToPreviousWordBoundary()","snippet":null,"description":"Moves the cursor to the previous word boundary. ","type":"method"},{"name":"moveToTop","text":"moveToTop()","snippet":null,"description":"Moves the cursor to the top of the buffer. ","type":"method"},{"name":"moveUp","text":null,"snippet":"moveUp(${1:rowCount}, ${2:options})","description":"Moves the cursor up one screen row.","type":"method"},{"name":"onDidChangePosition","text":null,"snippet":"onDidChangePosition(${1:callback})","description":"Calls your `callback` when the cursor has been moved.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeVisibility","text":null,"snippet":"onDidChangeVisibility(${1:callback})","description":"Calls your `callback` when the cursor's visibility has changed","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Calls your `callback` when the cursor is destroyed","leftLabel":"Disposable","type":"method"},{"name":"setBufferPosition","text":null,"snippet":"setBufferPosition(${1:bufferPosition}, ${2:options})","description":"Moves a cursor to a given buffer position.","type":"method"},{"name":"setScreenPosition","text":null,"snippet":"setScreenPosition(${1:screenPosition}, ${2:options})","description":"Moves a cursor to a given screen position.","type":"method"},{"name":"setVisible","text":"setVisible()","snippet":null,"description":"Sets whether the cursor is visible. ","type":"method"},{"name":"skipLeadingWhitespace","text":"skipLeadingWhitespace()","snippet":null,"description":"Moves the cursor to the beginning of the buffer line, skipping all\nwhitespace. ","type":"method"},{"name":"wordRegExp","text":null,"snippet":"wordRegExp(${1:options})","description":"Get the RegExp used by the cursor to determine what a \"word\" is.","leftLabel":"RegExp","type":"method"}],"Decoration":[{"name":"destroy","text":"destroy()","snippet":null,"description":"Destroy this marker.","type":"method"},{"name":"getId","text":"getId()","snippet":null,"description":"An id unique across all {Decoration} objects ","type":"method"},{"name":"getMarker","text":"getMarker()","snippet":null,"description":"","leftLabel":"Decoration","type":"method"},{"name":"getProperties","text":"getProperties()","snippet":null,"description":"","leftLabel":"Decoration","type":"method"},{"name":"onDidChangeProperties","text":null,"snippet":"onDidChangeProperties(${1:callback})","description":"When the {Decoration} is updated via {Decoration::update}.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the {Decoration} is destroyed","leftLabel":"Disposable","type":"method"},{"name":"setProperties","text":null,"snippet":"setProperties(${1:newProperties})","description":"Update the marker with new Properties. Allows you to change the decoration's class.","type":"method"}],"DeserializerManager":[{"name":"add","text":null,"snippet":"add(${1:deserializers})","description":"Register the given class(es) as deserializers.","type":"method"},{"name":"deserialize","text":null,"snippet":"deserialize(${1:state}, ${2:params})","description":"Deserialize the state and params.","type":"method"}],"Directory":[{"name":"constructor","text":null,"snippet":"constructor(${1:directoryPath}, ${2:symlink})","description":"Configures a new Directory instance, no files are accessed.","type":"method"},{"name":"contains","text":"contains()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"create","text":null,"snippet":"create(${1:mode})","description":"Creates the directory on disk that corresponds to `::getPath()` if\nno such directory already exists.","type":"method"},{"name":"exists","text":"exists()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"existsSync","text":"existsSync()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"getBaseName","text":"getBaseName()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getEntries","text":null,"snippet":"getEntries(${1:callback})","description":"Reads file entries in this directory from disk asynchronously.","type":"method"},{"name":"getEntriesSync","text":"getEntriesSync()","snippet":null,"description":"Reads file entries in this directory from disk synchronously.","leftLabel":"Array","type":"method"},{"name":"getFile","text":null,"snippet":"getFile(${1:filename})","description":"Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.","leftLabel":"File","type":"method"},{"name":"getParent","text":"getParent()","snippet":null,"description":"Traverse to the parent directory.","leftLabel":"Directory","type":"method"},{"name":"getPath","text":"getPath()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getRealPathSync","text":"getRealPathSync()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getSubdirectory","text":null,"snippet":"getSubdirectory(${1:dirname})","description":"Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.","leftLabel":"Directory","type":"method"},{"name":"isDirectory","text":"isDirectory()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isFile","text":"isFile()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isRoot","text":"isRoot()","snippet":null,"description":"Return a {Boolean}, true if this {Directory} is the root directory\nof the filesystem, or false if it isn't. ","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:callback})","description":"Invoke the given callback when the directory's contents change.","leftLabel":"Disposable","type":"method"},{"name":"relativize","text":"relativize()","snippet":null,"description":"","leftLabel":"String","type":"method"}],"Disposable":[{"name":"constructor","text":null,"snippet":"constructor(${1:disposalAction})","description":"Construct a Disposable","type":"method"},{"name":"dispose","text":"dispose()","snippet":null,"description":"Perform the disposal action, indicating that the resource associated\nwith this disposable is no longer needed.","type":"method"}],"Emitter":[{"name":"constructor","text":"constructor()","snippet":null,"description":"Construct an emitter.","type":"method"},{"name":"dispose","text":"dispose()","snippet":null,"description":"Unsubscribe all handlers. ","type":"method"},{"name":"emit","text":null,"snippet":"emit(${1:eventName}, ${2:value})","description":"Invoke handlers registered via {::on} for the given event name.","type":"method"},{"name":"on","text":null,"snippet":"on(${1:eventName}, ${2:handler})","description":"Register the given handler function to be invoked whenever events by\nthe given name are emitted via {::emit}.","leftLabel":"Disposable","type":"method"},{"name":"preempt","text":null,"snippet":"preempt(${1:eventName}, ${2:handler})","description":"Register the given handler function to be invoked *before* all\nother handlers existing at the time of subscription whenever events by the\ngiven name are emitted via {::emit}.","leftLabel":"Disposable","type":"method"}],"File":[{"name":"constructor","text":null,"snippet":"constructor(${1:filePath}, ${2:symlink})","description":"Configures a new File instance, no files are accessed.","type":"method"},{"name":"create","text":"create()","snippet":null,"description":"Creates the file on disk that corresponds to `::getPath()` if no\nsuch file already exists.","leftLabel":"Promise","type":"method"},{"name":"exists","text":"exists()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"existsSync","text":"existsSync()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"getBaseName","text":"getBaseName()","snippet":null,"description":"Return the {String} filename without any directory information. ","type":"method"},{"name":"getDigest","text":"getDigest()","snippet":null,"description":"Get the SHA-1 digest of this file","leftLabel":"String","type":"method"},{"name":"getDigestSync","text":"getDigestSync()","snippet":null,"description":"Get the SHA-1 digest of this file","leftLabel":"String","type":"method"},{"name":"getEncoding","text":"getEncoding()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getParent","text":"getParent()","snippet":null,"description":"Return the {Directory} that contains this file. ","type":"method"},{"name":"getPath","text":"getPath()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getRealPath","text":"getRealPath()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getRealPathSync","text":"getRealPathSync()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"isDirectory","text":"isDirectory()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isFile","text":"isFile()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:callback})","description":"Invoke the given callback when the file's contents change.","leftLabel":"Disposable","type":"method"},{"name":"onDidDelete","text":null,"snippet":"onDidDelete(${1:callback})","description":"Invoke the given callback when the file is deleted.","leftLabel":"Disposable","type":"method"},{"name":"onDidRename","text":null,"snippet":"onDidRename(${1:callback})","description":"Invoke the given callback when the file's path changes.","leftLabel":"Disposable","type":"method"},{"name":"onWillThrowWatchError","text":null,"snippet":"onWillThrowWatchError(${1:callback})","description":"Invoke the given callback when there is an error with the watch.\nWhen your callback has been invoked, the file will have unsubscribed from\nthe file watches.","type":"method"},{"name":"read","text":null,"snippet":"read(${1:flushCache})","description":"Reads the contents of the file.","leftLabel":null,"type":"method"},{"name":"setEncoding","text":null,"snippet":"setEncoding(${1:encoding})","description":"Sets the file's character set encoding name.","type":"method"},{"name":"write","text":null,"snippet":"write(${1:text})","description":"Overwrites the file with the given text.","leftLabel":"Promise","type":"method"},{"name":"writeSync","text":null,"snippet":"writeSync(${1:text})","description":"Overwrites the file with the given text.","leftLabel":null,"type":"method"}],"GitRepository":[{"name":"checkoutHead","text":null,"snippet":"checkoutHead(${1:path})","description":"Restore the contents of a path in the working directory and index\nto the version at `HEAD`.","leftLabel":"Boolean","type":"method"},{"name":"checkoutReference","text":null,"snippet":"checkoutReference(${1:reference}, ${2:create})","description":"Checks out a branch in your repository.","leftLabel":null,"type":"method"},{"name":"destroy","text":"destroy()","snippet":null,"description":"Destroy this {GitRepository} object.","type":"method"},{"name":"getAheadBehindCount","text":null,"snippet":"getAheadBehindCount(${1:reference}, ${2:path})","description":"","leftLabel":null,"type":"method"},{"name":"getCachedPathStatus","text":null,"snippet":"getCachedPathStatus(${1:path})","description":"Get the cached status for the given path.","leftLabel":"Number","type":"method"},{"name":"getCachedUpstreamAheadBehindCount","text":null,"snippet":"getCachedUpstreamAheadBehindCount(${1:path})","description":"Get the cached ahead/behind commit counts for the current branch's\nupstream branch.","leftLabel":"Object","type":"method"},{"name":"getConfigValue","text":null,"snippet":"getConfigValue(${1:path})","description":"","leftLabel":null,"type":"method"},{"name":"getDiffStats","text":null,"snippet":"getDiffStats(${1:path})","description":"Retrieves the number of lines added and removed to a path.","leftLabel":"Object","type":"method"},{"name":"getDirectoryStatus","text":null,"snippet":"getDirectoryStatus(${1:path})","description":"Get the status of a directory in the repository's working directory.","leftLabel":"Number","type":"method"},{"name":"getLineDiffs","text":null,"snippet":"getLineDiffs(${1:path}, ${2:text})","description":"Retrieves the line diffs comparing the `HEAD` version of the given\npath and the given text.","leftLabel":"Array","type":"method"},{"name":"getOriginURL","text":null,"snippet":"getOriginURL(${1:path})","description":"","leftLabel":null,"type":"method"},{"name":"getPath","text":"getPath()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getPathStatus","text":"getPathStatus()","snippet":null,"description":"Get the status of a single path in the repository.","leftLabel":"Number","type":"method"},{"name":"getReferenceTarget","text":null,"snippet":"getReferenceTarget(${1:reference}, ${2:path})","description":"","leftLabel":"String","type":"method"},{"name":"getReferences","text":null,"snippet":"getReferences(${1:path})","description":"Gets all the local and remote references.","leftLabel":"Object","type":"method"},{"name":"getShortHead","text":null,"snippet":"getShortHead(${1:path})","description":"Retrieves a shortened version of the HEAD reference value.","leftLabel":"String","type":"method"},{"name":"getType","text":"getType()","snippet":null,"description":"A {String} indicating the type of version control system used by\nthis repository.","leftLabel":null,"type":"method"},{"name":"getUpstreamBranch","text":null,"snippet":"getUpstreamBranch(${1:path})","description":"","leftLabel":null,"type":"method"},{"name":"getWorkingDirectory","text":"getWorkingDirectory()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"hasBranch","text":"hasBranch()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isPathIgnored","text":"isPathIgnored()","snippet":null,"description":"Is the given path ignored?","leftLabel":"Boolean","type":"method"},{"name":"isPathModified","text":"isPathModified()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isPathNew","text":"isPathNew()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isProjectAtRoot","text":"isProjectAtRoot()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isStatusModified","text":"isStatusModified()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isStatusNew","text":"isStatusNew()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"isSubmodule","text":null,"snippet":"isSubmodule(${1:path})","description":"Is the given path a submodule in the repository?","leftLabel":"Boolean","type":"method"},{"name":"onDidChangeStatus","text":null,"snippet":"onDidChangeStatus(${1:callback})","description":"Invoke the given callback when a specific file's status has\nchanged. When a file is updated, reloaded, etc, and the status changes, this\nwill be fired.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeStatuses","text":null,"snippet":"onDidChangeStatuses(${1:callback})","description":"Invoke the given callback when a multiple files' statuses have\nchanged. For example, on window focus, the status of all the paths in the\nrepo is checked. If any of them have changed, this will be fired. Call\n{::getPathStatus(path)} to get the status for your path of choice.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":"onDidDestroy()","snippet":null,"description":"Invoke the given callback when this GitRepository's destroy() method\nis invoked. ","type":"method"},{"name":"relativize","text":"relativize()","snippet":null,"description":"Makes a path relative to the repository's working directory. ","type":"method"}],"Grammar":[{"name":"onDidUpdate","text":null,"snippet":"onDidUpdate(${1:callback})","description":"Invoke the given callback when this grammar is updated due to a\ngrammar it depends on being added or removed from the registry.","leftLabel":"Disposable","type":"method"},{"name":"tokenizeLine","text":null,"snippet":"tokenizeLine(${1:line}, ${2:ruleStack}, ${3:firstLine})","description":"Tokenize the line of text.","leftLabel":"Object","type":"method"},{"name":"tokenizeLines","text":null,"snippet":"tokenizeLines(${1:text})","description":"Tokenize all lines in the given text.","leftLabel":"Array","type":"method"}],"GrammarRegistry":[{"name":"addGrammar","text":null,"snippet":"addGrammar(${1:grammar})","description":"Add a grammar to this registry.","leftLabel":"Disposable","type":"method"},{"name":"clearGrammarOverrideForPath","text":null,"snippet":"clearGrammarOverrideForPath(${1:filePath})","description":"Remove the grammar override for the given file path.","leftLabel":null,"type":"method"},{"name":"clearGrammarOverrides","text":"clearGrammarOverrides()","snippet":null,"description":"Remove all grammar overrides.","leftLabel":null,"type":"method"},{"name":"getGrammars","text":"getGrammars()","snippet":null,"description":"Get all the grammars in this registry.","leftLabel":"Array","type":"method"},{"name":"grammarForScopeName","text":null,"snippet":"grammarForScopeName(${1:scopeName})","description":"Get a grammar with the given scope name.","leftLabel":"Grammar","type":"method"},{"name":"grammarOverrideForPath","text":null,"snippet":"grammarOverrideForPath(${1:filePath})","description":"Get the grammar override for the given file path.","leftLabel":"Grammar","type":"method"},{"name":"loadGrammar","text":null,"snippet":"loadGrammar(${1:grammarPath}, ${2:callback})","description":"Read a grammar asynchronously and add it to the registry.","leftLabel":null,"type":"method"},{"name":"loadGrammarSync","text":null,"snippet":"loadGrammarSync(${1:grammarPath})","description":"Read a grammar synchronously and add it to this registry.","leftLabel":"Grammar","type":"method"},{"name":"onDidAddGrammar","text":null,"snippet":"onDidAddGrammar(${1:callback})","description":"Invoke the given callback when a grammar is added to the registry.","leftLabel":"Disposable","type":"method"},{"name":"onDidUpdateGrammar","text":null,"snippet":"onDidUpdateGrammar(${1:callback})","description":"Invoke the given callback when a grammar is updated due to a grammar\nit depends on being added or removed from the registry.","leftLabel":"Disposable","type":"method"},{"name":"readGrammar","text":null,"snippet":"readGrammar(${1:grammarPath}, ${2:callback})","description":"Read a grammar asynchronously but don't add it to the registry.","leftLabel":null,"type":"method"},{"name":"readGrammarSync","text":null,"snippet":"readGrammarSync(${1:grammarPath})","description":"Read a grammar synchronously but don't add it to the registry.","leftLabel":"Grammar","type":"method"},{"name":"removeGrammarForScopeName","text":null,"snippet":"removeGrammarForScopeName(${1:scopeName})","description":"Remove the grammar with the given scope name.","leftLabel":"Grammar","type":"method"},{"name":"selectGrammar","text":null,"snippet":"selectGrammar(${1:filePath}, ${2:fileContents})","description":"Select a grammar for the given file path and file contents.","leftLabel":"Grammar","type":"method"},{"name":"setGrammarOverrideForPath","text":null,"snippet":"setGrammarOverrideForPath(${1:filePath}, ${2:scopeName})","description":"Set the grammar override for the given file path.","leftLabel":"Grammar","type":"method"}],"KeymapManager":[{"name":"add","text":null,"snippet":"add(${1:source}, ${2:bindings})","description":"Add sets of key bindings grouped by CSS selector.","type":"method"},{"name":"constructor","text":null,"snippet":"constructor(${1:options})","description":"Create a new KeymapManager.","type":"method"},{"name":"destroy","text":"destroy()","snippet":null,"description":"Unwatch all watched paths. ","type":"method"},{"name":"findKeyBindings","text":null,"snippet":"findKeyBindings(${1:params})","description":"Get the key bindings for a given command and optional target.","leftLabel":"Array","type":"method"},{"name":"getKeyBindings","text":"getKeyBindings()","snippet":null,"description":"Get all current key bindings.","leftLabel":"Array","type":"method"},{"name":"getPartialMatchTimeout","text":"getPartialMatchTimeout()","snippet":null,"description":"Get the number of milliseconds allowed before pending states caused\nby partial matches of multi-keystroke bindings are terminated.","leftLabel":"Number","type":"method"},{"name":"handleKeyboardEvent","text":null,"snippet":"handleKeyboardEvent(${1:event})","description":"Dispatch a custom event associated with the matching key binding for\nthe given `KeyboardEvent` if one can be found.","type":"method"},{"name":"keystrokeForKeyboardEvent","text":null,"snippet":"keystrokeForKeyboardEvent(${1:event})","description":"Translate a keydown event to a keystroke string.","leftLabel":"String","type":"method"},{"name":"loadKeymap","text":null,"snippet":"loadKeymap(${1:path}, ${2:options})","description":"Load the key bindings from the given path.","type":"method"},{"name":"onDidFailToMatchBinding","text":null,"snippet":"onDidFailToMatchBinding(${1:callback})","description":"Invoke the given callback when one or more keystrokes fail to match\nany bindings.","leftLabel":"Disposable","type":"method"},{"name":"onDidFailToReadFile","text":null,"snippet":"onDidFailToReadFile(${1:callback})","description":"Invoke the given callback when a keymap file not able to be loaded.","leftLabel":"Disposable","type":"method"},{"name":"onDidMatchBinding","text":null,"snippet":"onDidMatchBinding(${1:callback})","description":"Invoke the given callback when one or more keystrokes completely\nmatch a key binding.","leftLabel":"Disposable","type":"method"},{"name":"onDidPartiallyMatchBindings","text":null,"snippet":"onDidPartiallyMatchBindings(${1:callback})","description":"Invoke the given callback when one or more keystrokes partially\nmatch a binding.","leftLabel":"Disposable","type":"method"},{"name":"watchKeymap","text":null,"snippet":"watchKeymap(${1:path})","description":"Cause the keymap to reload the key bindings file at the given path\nwhenever it changes.","type":"method"}],"Marker":[{"name":"clearTail","text":null,"snippet":"clearTail(${1:properties})","description":"Removes the marker's tail. After calling the marker's head position\nwill be reported as its current tail position until the tail is planted\nagain.","type":"method"},{"name":"compare","text":null,"snippet":"compare(${1:other})","description":"Compares this marker to another based on their ranges.","leftLabel":"Number","type":"method"},{"name":"copy","text":null,"snippet":"copy(${1:properties})","description":"Creates and returns a new {Marker} with the same properties as this\nmarker.","type":"method"},{"name":"destroy","text":"destroy()","snippet":null,"description":"Destroys the marker, causing it to emit the 'destroyed' event. Once\ndestroyed, a marker cannot be restored by undo/redo operations. ","type":"method"},{"name":"getBufferRange","text":"getBufferRange()","snippet":null,"description":"Gets the buffer range of the display marker.","leftLabel":"Range","type":"method"},{"name":"getEndBufferPosition","text":"getEndBufferPosition()","snippet":null,"description":"Retrieves the buffer position of the marker's end. This will always be\ngreater than or equal to the result of {Marker::getStartBufferPosition}.","leftLabel":"Point","type":"method"},{"name":"getEndScreenPosition","text":"getEndScreenPosition()","snippet":null,"description":"Retrieves the screen position of the marker's end. This will always be\ngreater than or equal to the result of {Marker::getStartScreenPosition}.","leftLabel":"Point","type":"method"},{"name":"getHeadBufferPosition","text":"getHeadBufferPosition()","snippet":null,"description":"Retrieves the buffer position of the marker's head.","leftLabel":"Point","type":"method"},{"name":"getHeadScreenPosition","text":"getHeadScreenPosition()","snippet":null,"description":"Retrieves the screen position of the marker's head.","leftLabel":"Point","type":"method"},{"name":"getInvalidationStrategy","text":"getInvalidationStrategy()","snippet":null,"description":"Get the invalidation strategy for this marker.","leftLabel":"String","type":"method"},{"name":"getProperties","text":"getProperties()","snippet":null,"description":"","leftLabel":"Object","type":"method"},{"name":"getScreenRange","text":"getScreenRange()","snippet":null,"description":"Gets the screen range of the display marker.","leftLabel":"Range","type":"method"},{"name":"getStartBufferPosition","text":"getStartBufferPosition()","snippet":null,"description":"Retrieves the buffer position of the marker's start. This will always be\nless than or equal to the result of {Marker::getEndBufferPosition}.","leftLabel":"Point","type":"method"},{"name":"getStartScreenPosition","text":"getStartScreenPosition()","snippet":null,"description":"Retrieves the screen position of the marker's start. This will always be\nless than or equal to the result of {Marker::getEndScreenPosition}.","leftLabel":"Point","type":"method"},{"name":"getTailBufferPosition","text":"getTailBufferPosition()","snippet":null,"description":"Retrieves the buffer position of the marker's tail.","leftLabel":"Point","type":"method"},{"name":"getTailScreenPosition","text":"getTailScreenPosition()","snippet":null,"description":"Retrieves the screen position of the marker's tail.","leftLabel":"Point","type":"method"},{"name":"hasTail","text":"hasTail()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isDestroyed","text":"isDestroyed()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isEqual","text":null,"snippet":"isEqual(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isReversed","text":"isReversed()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isValid","text":"isValid()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:callback})","description":"Invoke the given callback when the state of the marker changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the marker is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"plantTail","text":null,"snippet":"plantTail(${1:properties})","description":"Plants the marker's tail at the current head position. After calling\nthe marker's tail position will be its head position at the time of the\ncall, regardless of where the marker's head is moved.","type":"method"},{"name":"setBufferRange","text":null,"snippet":"setBufferRange(${1:bufferRange}, ${2:properties})","description":"Modifies the buffer range of the display marker.","type":"method"},{"name":"setHeadBufferPosition","text":null,"snippet":"setHeadBufferPosition(${1:bufferPosition}, ${2:properties})","description":"Sets the buffer position of the marker's head.","type":"method"},{"name":"setHeadScreenPosition","text":null,"snippet":"setHeadScreenPosition(${1:screenPosition}, ${2:properties})","description":"Sets the screen position of the marker's head.","type":"method"},{"name":"setProperties","text":null,"snippet":"setProperties(${1:properties})","description":"Merges an {Object} containing new properties into the marker's\nexisting properties.","type":"method"},{"name":"setScreenRange","text":null,"snippet":"setScreenRange(${1:screenRange}, ${2:properties})","description":"Modifies the screen range of the display marker.","type":"method"},{"name":"setTailBufferPosition","text":null,"snippet":"setTailBufferPosition(${1:bufferPosition}, ${2:properties})","description":"Sets the buffer position of the marker's tail.","type":"method"},{"name":"setTailScreenPosition","text":null,"snippet":"setTailScreenPosition(${1:screenPosition}, ${2:properties})","description":"Sets the screen position of the marker's tail.","type":"method"}],"MenuManager":[{"name":"add","text":null,"snippet":"add(${1:items})","description":"Adds the given items to the application menu.","leftLabel":"Disposable","type":"method"},{"name":"update","text":"update()","snippet":null,"description":"Refreshes the currently visible menu. ","type":"method"}],"PackageManager":[{"name":"disablePackage","text":"disablePackage()","snippet":null,"description":"Disable the package with the given name.","leftLabel":"Package","type":"method"},{"name":"enablePackage","text":"enablePackage()","snippet":null,"description":"Enable the package with the given name.","leftLabel":"Package","type":"method"},{"name":"getActivePackage","text":null,"snippet":"getActivePackage(${1:name})","description":"Get the active {Package} with the given name.","leftLabel":"Package","type":"method"},{"name":"getActivePackages","text":"getActivePackages()","snippet":null,"description":"Get an {Array} of all the active {Package}s. ","type":"method"},{"name":"getApmPath","text":"getApmPath()","snippet":null,"description":"Get the path to the apm command.","type":"method"},{"name":"getAvailablePackageMetadata","text":"getAvailablePackageMetadata()","snippet":null,"description":"Get an {Array} of {String}s of all the available package metadata. ","type":"method"},{"name":"getAvailablePackageNames","text":"getAvailablePackageNames()","snippet":null,"description":"Get an {Array} of {String}s of all the available package names. ","type":"method"},{"name":"getAvailablePackagePaths","text":"getAvailablePackagePaths()","snippet":null,"description":"Get an {Array} of {String}s of all the available package paths. ","type":"method"},{"name":"getLoadedPackage","text":null,"snippet":"getLoadedPackage(${1:name})","description":"Get the loaded {Package} with the given name.","leftLabel":"Package","type":"method"},{"name":"getLoadedPackages","text":"getLoadedPackages()","snippet":null,"description":"Get an {Array} of all the loaded {Package}s ","type":"method"},{"name":"getPackageDirPaths","text":"getPackageDirPaths()","snippet":null,"description":"Get the paths being used to look for packages.","leftLabel":"Array","type":"method"},{"name":"isBundledPackage","text":null,"snippet":"isBundledPackage(${1:name})","description":"Is the package with the given name bundled with Atom?","leftLabel":"Boolean","type":"method"},{"name":"isPackageActive","text":null,"snippet":"isPackageActive(${1:name})","description":"Is the {Package} with the given name active?","leftLabel":"Boolean","type":"method"},{"name":"isPackageDisabled","text":null,"snippet":"isPackageDisabled(${1:name})","description":"Is the package with the given name disabled?","leftLabel":"Boolean","type":"method"},{"name":"isPackageLoaded","text":null,"snippet":"isPackageLoaded(${1:name})","description":"Is the package with the given name loaded?","leftLabel":"Boolean","type":"method"},{"name":"onDidActivateInitialPackages","text":null,"snippet":"onDidActivateInitialPackages(${1:callback})","description":"Invoke the given callback when all packages have been activated.","leftLabel":"Disposable","type":"method"},{"name":"onDidActivatePackage","text":null,"snippet":"onDidActivatePackage(${1:callback})","description":"Invoke the given callback when a package is activated.","leftLabel":"Disposable","type":"method"},{"name":"onDidDeactivatePackage","text":null,"snippet":"onDidDeactivatePackage(${1:callback})","description":"Invoke the given callback when a package is deactivated.","leftLabel":"Disposable","type":"method"},{"name":"onDidLoadInitialPackages","text":null,"snippet":"onDidLoadInitialPackages(${1:callback})","description":"Invoke the given callback when all packages have been loaded.","leftLabel":"Disposable","type":"method"},{"name":"onDidLoadPackage","text":null,"snippet":"onDidLoadPackage(${1:callback})","description":"Invoke the given callback when a package is loaded.","leftLabel":"Disposable","type":"method"},{"name":"onDidUnloadPackage","text":null,"snippet":"onDidUnloadPackage(${1:callback})","description":"Invoke the given callback when a package is unloaded.","leftLabel":"Disposable","type":"method"},{"name":"resolvePackagePath","text":null,"snippet":"resolvePackagePath(${1:name})","description":"Resolve the given package name to a path on disk.","type":"method"}],"Pane":[{"name":"activate","text":"activate()","snippet":null,"description":"Makes this pane the *active* pane, causing it to gain focus. ","type":"method"},{"name":"activateItem","text":"activateItem()","snippet":null,"description":"Make the given item *active*, causing it to be displayed by\nthe pane's view. ","type":"method"},{"name":"activateItemAtIndex","text":null,"snippet":"activateItemAtIndex(${1:index})","description":"Activate the item at the given index.","type":"method"},{"name":"activateItemForURI","text":"activateItemForURI()","snippet":null,"description":"Activate the first item that matches the given URI.","leftLabel":"Boolean","type":"method"},{"name":"activateNextItem","text":"activateNextItem()","snippet":null,"description":"Makes the next item active. ","type":"method"},{"name":"activatePreviousItem","text":"activatePreviousItem()","snippet":null,"description":"Makes the previous item active. ","type":"method"},{"name":"addItem","text":null,"snippet":"addItem(${1:item}, ${2:index})","description":"Add the given item to the pane.","leftLabel":null,"type":"method"},{"name":"addItems","text":null,"snippet":"addItems(${1:items}, ${2:index})","description":"Add the given items to the pane.","leftLabel":"Array","type":"method"},{"name":"destroy","text":"destroy()","snippet":null,"description":"Close the pane and destroy all its items.","type":"method"},{"name":"destroyActiveItem","text":"destroyActiveItem()","snippet":null,"description":"Destroy the active item and activate the next item. ","type":"method"},{"name":"destroyInactiveItems","text":"destroyInactiveItems()","snippet":null,"description":"Destroy all items except for the active item. ","type":"method"},{"name":"destroyItem","text":null,"snippet":"destroyItem(${1:item})","description":"Destroy the given item.","type":"method"},{"name":"destroyItems","text":"destroyItems()","snippet":null,"description":"Destroy all items. ","type":"method"},{"name":"getActiveItem","text":"getActiveItem()","snippet":null,"description":"Get the active pane item in this pane.","leftLabel":null,"type":"method"},{"name":"getActiveItemIndex","text":"getActiveItemIndex()","snippet":null,"description":"Get the index of the active item.","leftLabel":"Number","type":"method"},{"name":"getItems","text":"getItems()","snippet":null,"description":"Get the items in this pane.","leftLabel":"Array","type":"method"},{"name":"isActive","text":"isActive()","snippet":null,"description":"Determine whether the pane is active.","leftLabel":"Boolean","type":"method"},{"name":"itemAtIndex","text":null,"snippet":"itemAtIndex(${1:index})","description":"Return the item at the given index.","leftLabel":null,"type":"method"},{"name":"itemForURI","text":null,"snippet":"itemForURI(${1:uri})","description":"Return the first item that matches the given URI or undefined if\nnone exists.","type":"method"},{"name":"moveItem","text":null,"snippet":"moveItem(${1:item}, ${2:index})","description":"Move the given item to the given index.","type":"method"},{"name":"moveItemLeft","text":"moveItemLeft()","snippet":null,"description":"Move the active tab to the left ","type":"method"},{"name":"moveItemRight","text":"moveItemRight()","snippet":null,"description":"Move the active tab to the right. ","type":"method"},{"name":"moveItemToPane","text":null,"snippet":"moveItemToPane(${1:item}, ${2:pane}, ${3:index})","description":"Move the given item to the given index on another pane.","type":"method"},{"name":"observeActive","text":null,"snippet":"observeActive(${1:callback})","description":"Invoke the given callback with the current and future values of the\n{::isActive} property.","leftLabel":"Disposable","type":"method"},{"name":"observeActiveItem","text":null,"snippet":"observeActiveItem(${1:callback})","description":"Invoke the given callback with the current and future values of\n{::getActiveItem}.","leftLabel":"Disposable","type":"method"},{"name":"observeItems","text":null,"snippet":"observeItems(${1:callback})","description":"Invoke the given callback with all current and future items.","leftLabel":"Disposable","type":"method"},{"name":"onDidActivate","text":null,"snippet":"onDidActivate(${1:callback})","description":"Invoke the given callback when the pane is activated.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddItem","text":null,"snippet":"onDidAddItem(${1:callback})","description":"Invoke the given callback when an item is added to the pane.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeActive","text":null,"snippet":"onDidChangeActive(${1:callback})","description":"Invoke the given callback when the value of the {::isActive}\nproperty changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeActiveItem","text":null,"snippet":"onDidChangeActiveItem(${1:callback})","description":"Invoke the given callback when the value of {::getActiveItem}\nchanges.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the pane is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"onDidMoveItem","text":null,"snippet":"onDidMoveItem(${1:callback})","description":"Invoke the given callback when an item is moved within the pane.","leftLabel":"Disposable","type":"method"},{"name":"onDidRemoveItem","text":null,"snippet":"onDidRemoveItem(${1:callback})","description":"Invoke the given callback when an item is removed from the pane.","leftLabel":"Disposable","type":"method"},{"name":"onWillDestroyItem","text":null,"snippet":"onWillDestroyItem(${1:callback})","description":"Invoke the given callback before items are destroyed.","leftLabel":"Disposable","type":"method"},{"name":"saveActiveItem","text":"saveActiveItem()","snippet":null,"description":"Save the active item. ","type":"method"},{"name":"saveActiveItemAs","text":null,"snippet":"saveActiveItemAs(${1:nextAction})","description":"Prompt the user for a location and save the active item with the\npath they select.","type":"method"},{"name":"saveItem","text":null,"snippet":"saveItem(${1:item}, ${2:nextAction})","description":"Save the given item.","type":"method"},{"name":"saveItemAs","text":null,"snippet":"saveItemAs(${1:item}, ${2:nextAction})","description":"Prompt the user for a location and save the active item with the\npath they select.","type":"method"},{"name":"saveItems","text":"saveItems()","snippet":null,"description":"Save all items. ","type":"method"},{"name":"splitDown","text":null,"snippet":"splitDown(${1:params})","description":"Creates a new pane below the receiver.","leftLabel":"Pane","type":"method"},{"name":"splitLeft","text":null,"snippet":"splitLeft(${1:params})","description":"Create a new pane to the left of this pane.","leftLabel":"Pane","type":"method"},{"name":"splitRight","text":null,"snippet":"splitRight(${1:params})","description":"Create a new pane to the right of this pane.","leftLabel":"Pane","type":"method"},{"name":"splitUp","text":null,"snippet":"splitUp(${1:params})","description":"Creates a new pane above the receiver.","leftLabel":"Pane","type":"method"}],"Panel":[{"name":"destroy","text":"destroy()","snippet":null,"description":"Destroy and remove this panel from the UI. ","type":"method"},{"name":"getItem","text":"getItem()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getPriority","text":"getPriority()","snippet":null,"description":"","leftLabel":"Number","type":"method"},{"name":"hide","text":"hide()","snippet":null,"description":"Hide this panel ","type":"method"},{"name":"isVisible","text":"isVisible()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"onDidChangeVisible","text":null,"snippet":"onDidChangeVisible(${1:callback})","description":"Invoke the given callback when the pane hidden or shown.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the pane is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"show","text":"show()","snippet":null,"description":"Show this panel ","type":"method"}],"Point":[{"name":"compare","text":null,"snippet":"compare(${1:other})","description":"","leftLabel":null,"type":"method"},{"name":"constructor","text":null,"snippet":"constructor(${1:row}, ${2:column})","description":"Construct a {Point} object","type":"method"},{"name":"copy","text":"copy()","snippet":null,"description":"","leftLabel":"Point","type":"method"},{"name":"freeze","text":"freeze()","snippet":null,"description":"Makes this point immutable and returns itself.","leftLabel":"Point","type":"method"},{"name":"isEqual","text":null,"snippet":"isEqual(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isGreaterThan","text":null,"snippet":"isGreaterThan(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isGreaterThanOrEqual","text":null,"snippet":"isGreaterThanOrEqual(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isLessThan","text":null,"snippet":"isLessThan(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isLessThanOrEqual","text":null,"snippet":"isLessThanOrEqual(${1:other})","description":"","leftLabel":"Boolean","type":"method"},{"name":"negate","text":"negate()","snippet":null,"description":"","leftLabel":"Point","type":"method"},{"name":"serialize","text":"serialize()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"toArray","text":"toArray()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"toString","text":"toString()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"translate","text":null,"snippet":"translate(${1:other})","description":"Build and return a new point by adding the rows and columns of\nthe given point.","leftLabel":"Point","type":"method"},{"name":"traverse","text":null,"snippet":"traverse(${1:other})","description":"Build and return a new {Point} by traversing the rows and columns\nspecified by the given point.","leftLabel":"Point","type":"method"}],"Project":[{"name":"addPath","text":null,"snippet":"addPath(${1:projectPath})","description":"Add a path to the project's list of root paths","type":"method"},{"name":"contains","text":null,"snippet":"contains(${1:pathToCheck})","description":"Determines whether the given path (real or symbolic) is inside the\nproject's directory.","leftLabel":null,"type":"method"},{"name":"getDirectories","text":"getDirectories()","snippet":null,"description":"Get an {Array} of {Directory}s associated with this project. ","type":"method"},{"name":"getPaths","text":"getPaths()","snippet":null,"description":"Get an {Array} of {String}s containing the paths of the project's\ndirectories. ","type":"method"},{"name":"getRepositories","text":"getRepositories()","snippet":null,"description":"Get an {Array} of {GitRepository}s associated with the project's\ndirectories.","type":"method"},{"name":"onDidChangePaths","text":null,"snippet":"onDidChangePaths(${1:callback})","description":"Invoke the given callback when the project paths change.","leftLabel":"Disposable","type":"method"},{"name":"relativizePath","text":null,"snippet":"relativizePath(${1:fullPath})","description":"Get the path to the project directory that contains the given path,\nand the relative path from that project directory to the given path.","leftLabel":"Array","type":"method"},{"name":"removePath","text":null,"snippet":"removePath(${1:projectPath})","description":"remove a path from the project's list of root paths.","type":"method"},{"name":"repositoryForDirectory","text":null,"snippet":"repositoryForDirectory(${1:directory})","description":"Get the repository for a given directory asynchronously.","leftLabel":"Promise","type":"method"},{"name":"setPaths","text":null,"snippet":"setPaths(${1:projectPaths})","description":"Set the paths of the project's directories.","type":"method"}],"Range":[{"name":"compare","text":null,"snippet":"compare(${1:otherRange})","description":"Compare two Ranges","leftLabel":null,"type":"method"},{"name":"constructor","text":null,"snippet":"constructor(${1:pointA}, ${2:pointB})","description":"Construct a {Range} object","type":"method"},{"name":"containsPoint","text":null,"snippet":"containsPoint(${1:point}, ${2:exclusive})","description":"","leftLabel":"Boolean","type":"method"},{"name":"containsRange","text":null,"snippet":"containsRange(${1:otherRange}, ${2:exclusive})","description":"","leftLabel":"Boolean","type":"method"},{"name":"copy","text":"copy()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"coversSameRows","text":null,"snippet":"coversSameRows(${1:otherRange})","description":"","leftLabel":"Boolean","type":"method"},{"name":"freeze","text":"freeze()","snippet":null,"description":"Freezes the range and its start and end point so it becomes\nimmutable and returns itself.","leftLabel":"Range","type":"method"},{"name":"getRowCount","text":"getRowCount()","snippet":null,"description":"Get the number of rows in this range.","leftLabel":"Number","type":"method"},{"name":"getRows","text":"getRows()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"intersectsRow","text":null,"snippet":"intersectsRow(${1:row})","description":"","leftLabel":"Boolean","type":"method"},{"name":"intersectsRowRange","text":null,"snippet":"intersectsRowRange(${1:startRow}, ${2:endRow})","description":"","leftLabel":"Boolean","type":"method"},{"name":"intersectsWith","text":null,"snippet":"intersectsWith(${1:otherRange}, ${2:exclusive})","description":"Determines whether this range intersects with the argument.","leftLabel":"Boolean","type":"method"},{"name":"isEmpty","text":"isEmpty()","snippet":null,"description":"Is the start position of this range equal to the end position?","leftLabel":"Boolean","type":"method"},{"name":"isEqual","text":null,"snippet":"isEqual(${1:otherRange})","description":"","leftLabel":"Boolean","type":"method"},{"name":"isSingleLine","text":"isSingleLine()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"negate","text":"negate()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"serialize","text":"serialize()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"toString","text":"toString()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"translate","text":null,"snippet":"translate(${1:startDelta}, ${2:endDelta})","description":"Build and return a new range by translating this range's start and\nend points by the given delta(s).","leftLabel":"Range","type":"method"},{"name":"traverse","text":null,"snippet":"traverse(${1:delta})","description":"Build and return a new range by traversing this range's start and\nend points by the given delta.","leftLabel":"Range","type":"method"},{"name":"union","text":null,"snippet":"union(${1:otherRange})","description":"","leftLabel":null,"type":"method"}],"ScopeDescriptor":[{"name":"constructor","text":null,"snippet":"constructor(${1:object})","description":"Create a {ScopeDescriptor} object.","type":"method"},{"name":"getScopesArray","text":"getScopesArray()","snippet":null,"description":"","leftLabel":"Array","type":"method"}],"Selection":[{"name":"addSelectionAbove","text":"addSelectionAbove()","snippet":null,"description":"Moves the selection up one row. ","type":"method"},{"name":"addSelectionBelow","text":"addSelectionBelow()","snippet":null,"description":"Moves the selection down one row. ","type":"method"},{"name":"autoIndentSelectedRows","text":"autoIndentSelectedRows()","snippet":null,"description":"Sets the indentation level of all selected rows to values suggested\nby the relevant grammars. ","type":"method"},{"name":"backspace","text":"backspace()","snippet":null,"description":"Removes the first character before the selection if the selection\nis empty otherwise it deletes the selection. ","type":"method"},{"name":"clear","text":null,"snippet":"clear(${1:options})","description":"Clears the selection, moving the marker to the head.","type":"method"},{"name":"compare","text":null,"snippet":"compare(${1:otherSelection})","description":"Compare this selection's buffer range to another selection's buffer\nrange.","type":"method"},{"name":"copy","text":null,"snippet":"copy(${1:maintainClipboard}, ${2:fullLine})","description":"Copies the current selection to the clipboard.","type":"method"},{"name":"cut","text":null,"snippet":"cut(${1:maintainClipboard}, ${2:fullLine})","description":"Copies the selection to the clipboard and then deletes it.","type":"method"},{"name":"cutToEndOfLine","text":"cutToEndOfLine()","snippet":null,"description":"Cuts the selection until the end of the line. ","type":"method"},{"name":"delete","text":"delete()","snippet":null,"description":"Removes the selection or the next character after the start of the\nselection if the selection is empty. ","type":"method"},{"name":"deleteLine","text":"deleteLine()","snippet":null,"description":"Removes the line at the beginning of the selection if the selection\nis empty unless the selection spans multiple lines in which case all lines\nare removed. ","type":"method"},{"name":"deleteSelectedText","text":"deleteSelectedText()","snippet":null,"description":"Removes only the selected text. ","type":"method"},{"name":"deleteToBeginningOfLine","text":"deleteToBeginningOfLine()","snippet":null,"description":"Removes from the beginning of the line which the selection begins on\nall the way through to the end of the selection. ","type":"method"},{"name":"deleteToBeginningOfWord","text":"deleteToBeginningOfWord()","snippet":null,"description":"Removes from the start of the selection to the beginning of the\ncurrent word if the selection is empty otherwise it deletes the selection. ","type":"method"},{"name":"deleteToEndOfLine","text":"deleteToEndOfLine()","snippet":null,"description":"If the selection is empty, removes all text from the cursor to the\nend of the line. If the cursor is already at the end of the line, it\nremoves the following newline. If the selection isn't empty, only deletes\nthe contents of the selection. ","type":"method"},{"name":"deleteToEndOfWord","text":"deleteToEndOfWord()","snippet":null,"description":"Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected. ","type":"method"},{"name":"expandOverLine","text":"expandOverLine()","snippet":null,"description":"Expands the newest selection to include the entire line on which\nthe cursor currently rests.","type":"method"},{"name":"expandOverWord","text":"expandOverWord()","snippet":null,"description":"Expands the newest selection to include the entire word on which\nthe cursors rests. ","type":"method"},{"name":"fold","text":"fold()","snippet":null,"description":"Creates a fold containing the current selection. ","type":"method"},{"name":"getBufferRange","text":"getBufferRange()","snippet":null,"description":"","leftLabel":"Range","type":"method"},{"name":"getBufferRowRange","text":"getBufferRowRange()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"getScreenRange","text":"getScreenRange()","snippet":null,"description":"","leftLabel":"Range","type":"method"},{"name":"getText","text":"getText()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"indentSelectedRows","text":"indentSelectedRows()","snippet":null,"description":"If the selection spans multiple rows, indent all of them. ","type":"method"},{"name":"insertText","text":null,"snippet":"insertText(${1:text}, ${2:options})","description":"Replaces text at the current selection.","type":"method"},{"name":"intersectsBufferRange","text":null,"snippet":"intersectsBufferRange(${1:bufferRange})","description":"Identifies if a selection intersects with a given buffer range.","leftLabel":"Boolean","type":"method"},{"name":"intersectsWith","text":null,"snippet":"intersectsWith(${1:otherSelection})","description":"Identifies if a selection intersects with another selection.","leftLabel":"Boolean","type":"method"},{"name":"isEmpty","text":"isEmpty()","snippet":null,"description":"Determines if the selection contains anything. ","type":"method"},{"name":"isReversed","text":"isReversed()","snippet":null,"description":"Determines if the ending position of a marker is greater than the\nstarting position.","type":"method"},{"name":"isSingleScreenLine","text":"isSingleScreenLine()","snippet":null,"description":"","leftLabel":null,"type":"method"},{"name":"joinLines","text":"joinLines()","snippet":null,"description":"Joins the current line with the one below it. Lines will\nbe separated by a single space.","type":"method"},{"name":"merge","text":null,"snippet":"merge(${1:otherSelection}, ${2:options})","description":"Combines the given selection into this selection and then destroys\nthe given selection.","type":"method"},{"name":"onDidChangeRange","text":null,"snippet":"onDidChangeRange(${1:callback})","description":"Calls your `callback` when the selection was moved.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Calls your `callback` when the selection was destroyed","leftLabel":"Disposable","type":"method"},{"name":"outdentSelectedRows","text":"outdentSelectedRows()","snippet":null,"description":"Removes one level of indent from the currently selected rows. ","type":"method"},{"name":"selectAll","text":"selectAll()","snippet":null,"description":"Selects all the text in the buffer. ","type":"method"},{"name":"selectDown","text":null,"snippet":"selectDown(${1:rowCount})","description":"Selects all the text one position below the cursor.","type":"method"},{"name":"selectLeft","text":null,"snippet":"selectLeft(${1:columnCount})","description":"Selects the text one position left of the cursor.","type":"method"},{"name":"selectLine","text":null,"snippet":"selectLine(${1:row})","description":"Selects an entire line in the buffer.","type":"method"},{"name":"selectRight","text":null,"snippet":"selectRight(${1:columnCount})","description":"Selects the text one position right of the cursor.","type":"method"},{"name":"selectToBeginningOfLine","text":"selectToBeginningOfLine()","snippet":null,"description":"Selects all the text from the current cursor position to the\nbeginning of the line. ","type":"method"},{"name":"selectToBeginningOfNextParagraph","text":"selectToBeginningOfNextParagraph()","snippet":null,"description":"Selects all the text from the current cursor position to the\nbeginning of the next paragraph. ","type":"method"},{"name":"selectToBeginningOfNextWord","text":"selectToBeginningOfNextWord()","snippet":null,"description":"Selects all the text from the current cursor position to the\nbeginning of the next word. ","type":"method"},{"name":"selectToBeginningOfPreviousParagraph","text":"selectToBeginningOfPreviousParagraph()","snippet":null,"description":"Selects all the text from the current cursor position to the\nbeginning of the previous paragraph. ","type":"method"},{"name":"selectToBeginningOfWord","text":"selectToBeginningOfWord()","snippet":null,"description":"Selects all the text from the current cursor position to the\nbeginning of the word. ","type":"method"},{"name":"selectToBottom","text":"selectToBottom()","snippet":null,"description":"Selects all the text from the current cursor position to the bottom\nof the buffer. ","type":"method"},{"name":"selectToBufferPosition","text":null,"snippet":"selectToBufferPosition(${1:position})","description":"Selects the text from the current cursor position to a given buffer\nposition.","type":"method"},{"name":"selectToEndOfLine","text":"selectToEndOfLine()","snippet":null,"description":"Selects all the text from the current cursor position to the end of\nthe line. ","type":"method"},{"name":"selectToEndOfWord","text":"selectToEndOfWord()","snippet":null,"description":"Selects all the text from the current cursor position to the end of\nthe word. ","type":"method"},{"name":"selectToFirstCharacterOfLine","text":"selectToFirstCharacterOfLine()","snippet":null,"description":"Selects all the text from the current cursor position to the first\ncharacter of the line. ","type":"method"},{"name":"selectToNextWordBoundary","text":"selectToNextWordBoundary()","snippet":null,"description":"Selects text to the next word boundary. ","type":"method"},{"name":"selectToPreviousWordBoundary","text":"selectToPreviousWordBoundary()","snippet":null,"description":"Selects text to the previous word boundary. ","type":"method"},{"name":"selectToScreenPosition","text":null,"snippet":"selectToScreenPosition(${1:position})","description":"Selects the text from the current cursor position to a given screen\nposition.","type":"method"},{"name":"selectToTop","text":"selectToTop()","snippet":null,"description":"Selects all the text from the current cursor position to the top of\nthe buffer. ","type":"method"},{"name":"selectUp","text":null,"snippet":"selectUp(${1:rowCount})","description":"Selects all the text one position above the cursor.","type":"method"},{"name":"selectWord","text":"selectWord()","snippet":null,"description":"Modifies the selection to encompass the current word.","leftLabel":"Range","type":"method"},{"name":"setBufferRange","text":null,"snippet":"setBufferRange(${1:screenRange}, ${2:options})","description":"Modifies the buffer {Range} for the selection.","type":"method"},{"name":"setScreenRange","text":null,"snippet":"setScreenRange(${1:screenRange}, ${2:options})","description":"Modifies the screen range for the selection.","type":"method"},{"name":"toggleLineComments","text":"toggleLineComments()","snippet":null,"description":"Wraps the selected lines in comments if they aren't currently part\nof a comment.","type":"method"}],"StyleManager":[{"name":"getStyleElements","text":"getStyleElements()","snippet":null,"description":"Get all loaded style elements. ","type":"method"},{"name":"getUserStyleSheetPath","text":"getUserStyleSheetPath()","snippet":null,"description":"Get the path of the user style sheet in `~/.atom`.","leftLabel":"String","type":"method"},{"name":"observeStyleElements","text":null,"snippet":"observeStyleElements(${1:callback})","description":"Invoke `callback` for all current and future style elements.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddStyleElement","text":null,"snippet":"onDidAddStyleElement(${1:callback})","description":"Invoke `callback` when a style element is added.","leftLabel":"Disposable","type":"method"},{"name":"onDidRemoveStyleElement","text":null,"snippet":"onDidRemoveStyleElement(${1:callback})","description":"Invoke `callback` when a style element is removed.","leftLabel":"Disposable","type":"method"},{"name":"onDidUpdateStyleElement","text":null,"snippet":"onDidUpdateStyleElement(${1:callback})","description":"Invoke `callback` when an existing style element is updated.","leftLabel":"Disposable","type":"method"}],"Task":[{"name":"constructor","text":null,"snippet":"constructor(${1:taskPath})","description":"Creates a task. You should probably use {.once}","type":"method"},{"name":"on","text":null,"snippet":"on(${1:eventName}, ${2:callback})","description":"Call a function when an event is emitted by the child process","leftLabel":"Disposable","type":"method"},{"name":"send","text":null,"snippet":"send(${1:message})","description":"Send message to the task.","type":"method"},{"name":"start","text":null,"snippet":"start(${1:args}, ${2:callback})","description":"Starts the task.","type":"method"},{"name":"terminate","text":"terminate()","snippet":null,"description":"Forcefully stop the running task.","type":"method"}],"TextBuffer":[{"name":"append","text":null,"snippet":"append(${1:text}, ${2:options})","description":"Append text to the end of the buffer.","leftLabel":"Range","type":"method"},{"name":"backwardsScan","text":null,"snippet":"backwardsScan(${1:regex}, ${2:iterator})","description":"Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.","type":"method"},{"name":"backwardsScanInRange","text":null,"snippet":"backwardsScanInRange(${1:regex}, ${2:range}, ${3:iterator})","description":"Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.","type":"method"},{"name":"characterIndexForPosition","text":null,"snippet":"characterIndexForPosition(${1:position})","description":"Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.","leftLabel":"Number","type":"method"},{"name":"clearUndoStack","text":"clearUndoStack()","snippet":null,"description":"Clear the undo stack. ","type":"method"},{"name":"clipPosition","text":null,"snippet":"clipPosition(${1:position})","description":"Clip the given point so it is at a valid position in the buffer.","leftLabel":"Point","type":"method"},{"name":"clipRange","text":null,"snippet":"clipRange(${1:range})","description":"Clip the given range so it starts and ends at valid positions.","leftLabel":"Range","type":"method"},{"name":"constructor","text":null,"snippet":"constructor(${1:params})","description":"Create a new buffer with the given params.","type":"method"},{"name":"createCheckpoint","text":"createCheckpoint()","snippet":null,"description":"Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.","leftLabel":null,"type":"method"},{"name":"delete","text":null,"snippet":"delete(${1:range})","description":"Delete the text in the given range.","leftLabel":"Range","type":"method"},{"name":"deleteRow","text":null,"snippet":"deleteRow(${1:row})","description":"Delete the line associated with a specified row.","leftLabel":"Range","type":"method"},{"name":"deleteRows","text":null,"snippet":"deleteRows(${1:startRow}, ${2:endRow})","description":"Delete the lines associated with the specified row range.","leftLabel":"Range","type":"method"},{"name":"findMarkers","text":null,"snippet":"findMarkers(${1:params})","description":"Find markers conforming to the given parameters.","leftLabel":"Array","type":"method"},{"name":"getEncoding","text":"getEncoding()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getEndPosition","text":"getEndPosition()","snippet":null,"description":"Get the maximal position in the buffer, where new text would be\nappended.","leftLabel":"Point","type":"method"},{"name":"getFirstPosition","text":"getFirstPosition()","snippet":null,"description":"Get the first position in the buffer, which is always `[0, 0]`.","leftLabel":"Point","type":"method"},{"name":"getLastLine","text":"getLastLine()","snippet":null,"description":"Get the text of the last line of the buffer, without its line\nending.","leftLabel":"String","type":"method"},{"name":"getLastRow","text":"getLastRow()","snippet":null,"description":"Get the last 0-indexed row in the buffer.","leftLabel":"Number","type":"method"},{"name":"getLineCount","text":"getLineCount()","snippet":null,"description":"Get the number of lines in the buffer.","leftLabel":"Number","type":"method"},{"name":"getLines","text":"getLines()","snippet":null,"description":"Get the text of all lines in the buffer, without their line endings.","leftLabel":"Array","type":"method"},{"name":"getMarker","text":null,"snippet":"getMarker(${1:id})","description":"Get an existing marker by its id.","leftLabel":"Marker","type":"method"},{"name":"getMarkerCount","text":"getMarkerCount()","snippet":null,"description":"Get the number of markers in the buffer.","leftLabel":"Number","type":"method"},{"name":"getMarkers","text":"getMarkers()","snippet":null,"description":"Get all existing markers on the buffer.","leftLabel":"Array","type":"method"},{"name":"getMaxCharacterIndex","text":"getMaxCharacterIndex()","snippet":null,"description":"Get the length of the buffer in characters.","leftLabel":"Number","type":"method"},{"name":"getPath","text":"getPath()","snippet":null,"description":"Get the path of the associated file.","leftLabel":"String","type":"method"},{"name":"getRange","text":"getRange()","snippet":null,"description":"Get the range spanning from `[0, 0]` to {::getEndPosition}.","leftLabel":"Range","type":"method"},{"name":"getStoppedChangingDelay","text":"getStoppedChangingDelay()","snippet":null,"description":"Get the number of milliseconds that will elapse without a change\nbefore {::onDidStopChanging} observers are invoked following a change.","leftLabel":"Number","type":"method"},{"name":"getText","text":"getText()","snippet":null,"description":"Get the entire text of the buffer.","leftLabel":"String","type":"method"},{"name":"getTextInRange","text":null,"snippet":"getTextInRange(${1:range})","description":"Get the text in a range.","leftLabel":"String","type":"method"},{"name":"getUri","text":"getUri()","snippet":null,"description":"Get the path of the associated file.","leftLabel":"String","type":"method"},{"name":"groupChangesSinceCheckpoint","text":"groupChangesSinceCheckpoint()","snippet":null,"description":"Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.","leftLabel":"Boolean","type":"method"},{"name":"insert","text":null,"snippet":"insert(${1:position}, ${2:text}, ${3:options})","description":"Insert text at the given position.","leftLabel":"Range","type":"method"},{"name":"isEmpty","text":"isEmpty()","snippet":null,"description":"Determine whether the buffer is empty.","leftLabel":"Boolean","type":"method"},{"name":"isInConflict","text":"isInConflict()","snippet":null,"description":"Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.","leftLabel":"Boolean","type":"method"},{"name":"isModified","text":"isModified()","snippet":null,"description":"Determine if the in-memory contents of the buffer differ from its\ncontents on disk.","leftLabel":"Boolean","type":"method"},{"name":"isRowBlank","text":null,"snippet":"isRowBlank(${1:row})","description":"Determine if the given row contains only whitespace.","leftLabel":"Boolean","type":"method"},{"name":"lineEndingForRow","text":null,"snippet":"lineEndingForRow(${1:row})","description":"Get the line ending for the given 0-indexed row.","leftLabel":"String","type":"method"},{"name":"lineForRow","text":null,"snippet":"lineForRow(${1:row})","description":"Get the text of the line at the given row, without its line ending.","leftLabel":"String","type":"method"},{"name":"lineLengthForRow","text":null,"snippet":"lineLengthForRow(${1:row})","description":"Get the length of the line for the given 0-indexed row, without its\nline ending.","leftLabel":"Number","type":"method"},{"name":"markPosition","text":null,"snippet":"markPosition(${1:position}, ${2:properties})","description":"Create a marker at the given position with no tail.","leftLabel":"Marker","type":"method"},{"name":"markRange","text":null,"snippet":"markRange(${1:range}, ${2:properties})","description":"Create a marker with the given range. This marker will maintain\nits logical location as the buffer is changed, so if you mark a particular\nword, the marker will remain over that word even if the word's location in\nthe buffer changes.","leftLabel":"Marker","type":"method"},{"name":"nextNonBlankRow","text":null,"snippet":"nextNonBlankRow(${1:startRow})","description":"Given a row, find the next row that's not blank.","leftLabel":"Number","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:callback})","description":"Invoke the given callback synchronously when the content of the\nbuffer changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeEncoding","text":null,"snippet":"onDidChangeEncoding(${1:callback})","description":"Invoke the given callback when the value of {::getEncoding} changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeModified","text":null,"snippet":"onDidChangeModified(${1:callback})","description":"Invoke the given callback the value of {::isModified} changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangePath","text":null,"snippet":"onDidChangePath(${1:callback})","description":"Invoke the given callback when the value of {::getPath} changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidConflict","text":null,"snippet":"onDidConflict(${1:callback})","description":"Invoke the given callback when the in-memory contents of the\nbuffer become in conflict with the contents of the file on disk.","leftLabel":"Disposable","type":"method"},{"name":"onDidCreateMarker","text":null,"snippet":"onDidCreateMarker(${1:callback})","description":"Invoke the given callback when a marker is created.","leftLabel":"Disposable","type":"method"},{"name":"onDidDelete","text":null,"snippet":"onDidDelete(${1:callback})","description":"Invoke the given callback after the file backing the buffer is\ndeleted.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the buffer is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"onDidReload","text":null,"snippet":"onDidReload(${1:callback})","description":"Invoke the given callback after the buffer is reloaded from the\ncontents of its file on disk.","leftLabel":"Disposable","type":"method"},{"name":"onDidSave","text":null,"snippet":"onDidSave(${1:callback})","description":"Invoke the given callback after the buffer is saved to disk.","leftLabel":"Disposable","type":"method"},{"name":"onDidStopChanging","text":null,"snippet":"onDidStopChanging(${1:callback})","description":"Invoke the given callback asynchronously following one or more\nchanges after {::getStoppedChangingDelay} milliseconds elapse without an\nadditional change.","leftLabel":"Disposable","type":"method"},{"name":"onDidUpdateMarkers","text":null,"snippet":"onDidUpdateMarkers(${1:callback})","description":"Invoke the given callback when all marker `::onDidChange`\nobservers have been notified following a change to the buffer.","leftLabel":"Disposable","type":"method"},{"name":"onWillChange","text":null,"snippet":"onWillChange(${1:callback})","description":"Invoke the given callback synchronously _before_ the content of the\nbuffer changes.","leftLabel":"Disposable","type":"method"},{"name":"onWillReload","text":null,"snippet":"onWillReload(${1:callback})","description":"Invoke the given callback before the buffer is reloaded from the\ncontents of its file on disk.","leftLabel":"Disposable","type":"method"},{"name":"onWillSave","text":null,"snippet":"onWillSave(${1:callback})","description":"Invoke the given callback before the buffer is saved to disk.","leftLabel":"Disposable","type":"method"},{"name":"onWillThrowWatchError","text":null,"snippet":"onWillThrowWatchError(${1:callback})","description":"Invoke the given callback when there is an error in watching the\nfile.","leftLabel":"Disposable","type":"method"},{"name":"positionForCharacterIndex","text":null,"snippet":"positionForCharacterIndex(${1:offset})","description":"Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.","leftLabel":"Point","type":"method"},{"name":"previousNonBlankRow","text":null,"snippet":"previousNonBlankRow(${1:startRow})","description":"Given a row, find the first preceding row that's not blank.","leftLabel":"Number","type":"method"},{"name":"rangeForRow","text":null,"snippet":"rangeForRow(${1:row}, ${2:includeNewline})","description":"Get the range for the given row","leftLabel":"Range","type":"method"},{"name":"redo","text":"redo()","snippet":null,"description":"Redo the last operation ","type":"method"},{"name":"reload","text":"reload()","snippet":null,"description":"Reload the buffer's contents from disk.","type":"method"},{"name":"replace","text":null,"snippet":"replace(${1:regex}, ${2:replacementText})","description":"Replace all regular expression matches in the entire buffer.","leftLabel":"Number","type":"method"},{"name":"revertToCheckpoint","text":"revertToCheckpoint()","snippet":null,"description":"Revert the buffer to the state it was in when the given\ncheckpoint was created.","leftLabel":"Boolean","type":"method"},{"name":"save","text":"save()","snippet":null,"description":"Save the buffer. ","type":"method"},{"name":"saveAs","text":null,"snippet":"saveAs(${1:filePath})","description":"Save the buffer at a specific path.","type":"method"},{"name":"scan","text":null,"snippet":"scan(${1:regex}, ${2:iterator})","description":"Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.","type":"method"},{"name":"scanInRange","text":null,"snippet":"scanInRange(${1:regex}, ${2:range}, ${3:iterator})","description":"Scan regular expression matches in a given range , calling the given\niterator function on each match.","type":"method"},{"name":"setEncoding","text":null,"snippet":"setEncoding(${1:encoding})","description":"Sets the character set encoding for this buffer.","type":"method"},{"name":"setPath","text":null,"snippet":"setPath(${1:filePath})","description":"Set the path for the buffer's associated file.","type":"method"},{"name":"setText","text":null,"snippet":"setText(${1:text})","description":"Replace the entire contents of the buffer with the given text.","leftLabel":"Range","type":"method"},{"name":"setTextInRange","text":null,"snippet":"setTextInRange(${1:range}, ${2:text}, ${3:options})","description":"Set the text in the given range.","leftLabel":"Range","type":"method"},{"name":"setTextViaDiff","text":null,"snippet":"setTextViaDiff(${1:text})","description":"Replace the current buffer contents by applying a diff based on the\ngiven text.","type":"method"},{"name":"transact","text":null,"snippet":"transact(${1:groupingInterval}, ${2:fn})","description":"Batch multiple operations as a single undo/redo step.","type":"method"},{"name":"undo","text":"undo()","snippet":null,"description":"Undo the last operation. If a transaction is in progress, aborts it. ","type":"method"}],"TextEditor":[{"name":"abortTransaction","text":"abortTransaction()","snippet":null,"description":"Abort an open transaction, undoing any operations performed so far\nwithin the transaction. ","type":"method"},{"name":"addCursorAtBufferPosition","text":null,"snippet":"addCursorAtBufferPosition(${1:bufferPosition})","description":"Add a cursor at the given position in buffer coordinates.","leftLabel":"Cursor","type":"method"},{"name":"addCursorAtScreenPosition","text":null,"snippet":"addCursorAtScreenPosition(${1:screenPosition})","description":"Add a cursor at the position in screen coordinates.","leftLabel":"Cursor","type":"method"},{"name":"addSelectionForBufferRange","text":null,"snippet":"addSelectionForBufferRange(${1:bufferRange}, ${2:options})","description":"Add a selection for the given range in buffer coordinates.","leftLabel":"Selection","type":"method"},{"name":"addSelectionForScreenRange","text":null,"snippet":"addSelectionForScreenRange(${1:screenRange}, ${2:options})","description":"Add a selection for the given range in screen coordinates.","leftLabel":"Selection","type":"method"},{"name":"autoIndentSelectedRows","text":"autoIndentSelectedRows()","snippet":null,"description":"Indent rows intersecting selections based on the grammar's suggested\nindent level. ","type":"method"},{"name":"backspace","text":"backspace()","snippet":null,"description":"For each selection, if the selection is empty, delete the character\npreceding the cursor. Otherwise delete the selected text. ","type":"method"},{"name":"backwardsScanInBufferRange","text":null,"snippet":"backwardsScanInBufferRange(${1:regex}, ${2:range}, ${3:iterator})","description":"Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.","type":"method"},{"name":"bufferPositionForScreenPosition","text":null,"snippet":"bufferPositionForScreenPosition(${1:bufferPosition}, ${2:options})","description":"Convert a position in screen-coordinates to buffer-coordinates.","leftLabel":"Point","type":"method"},{"name":"bufferRangeForScopeAtCursor","text":null,"snippet":"bufferRangeForScopeAtCursor(${1:scopeSelector})","description":"Get the range in buffer coordinates of all tokens surrounding the\ncursor that match the given scope selector.","leftLabel":"Range","type":"method"},{"name":"bufferRangeForScreenRange","text":null,"snippet":"bufferRangeForScreenRange(${1:screenRange})","description":"Convert a range in screen-coordinates to buffer-coordinates.","leftLabel":"Range","type":"method"},{"name":"clipBufferPosition","text":null,"snippet":"clipBufferPosition(${1:bufferPosition})","description":"Clip the given {Point} to a valid position in the buffer.","leftLabel":"Point","type":"method"},{"name":"clipBufferRange","text":null,"snippet":"clipBufferRange(${1:range})","description":"Clip the start and end of the given range to valid positions in the\nbuffer. See {::clipBufferPosition} for more information.","leftLabel":"Range","type":"method"},{"name":"clipScreenPosition","text":null,"snippet":"clipScreenPosition(${1:screenPosition}, ${2:options})","description":"Clip the given {Point} to a valid position on screen.","leftLabel":"Point","type":"method"},{"name":"clipScreenRange","text":null,"snippet":"clipScreenRange(${1:range}, ${2:options})","description":"Clip the start and end of the given range to valid positions on screen.\nSee {::clipScreenPosition} for more information.","type":"method"},{"name":"copySelectedText","text":"copySelectedText()","snippet":null,"description":"For each selection, copy the selected text. ","type":"method"},{"name":"createCheckpoint","text":"createCheckpoint()","snippet":null,"description":"Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.","leftLabel":null,"type":"method"},{"name":"cutSelectedText","text":"cutSelectedText()","snippet":null,"description":"For each selection, cut the selected text. ","type":"method"},{"name":"cutToEndOfLine","text":"cutToEndOfLine()","snippet":null,"description":"For each selection, if the selection is empty, cut all characters\nof the containing line following the cursor. Otherwise cut the selected\ntext. ","type":"method"},{"name":"decorateMarker","text":null,"snippet":"decorateMarker(${1:marker}, ${2:decorationParams})","description":"Adds a decoration that tracks a {Marker}. When the marker moves,\nis invalidated, or is destroyed, the decoration will be updated to reflect\nthe marker's state.","leftLabel":"Decoration","type":"method"},{"name":"decorationsForScreenRowRange","text":null,"snippet":"decorationsForScreenRowRange(${1:startScreenRow}, ${2:endScreenRow})","description":"Get all the decorations within a screen row range.","leftLabel":"Object","type":"method"},{"name":"delete","text":"delete()","snippet":null,"description":"For each selection, if the selection is empty, delete the character\nfollowing the cursor. Otherwise delete the selected text. ","type":"method"},{"name":"deleteLine","text":"deleteLine()","snippet":null,"description":"Delete all lines intersecting selections. ","type":"method"},{"name":"deleteToBeginningOfLine","text":"deleteToBeginningOfLine()","snippet":null,"description":"For each selection, if the selection is empty, delete all characters\nof the containing line that precede the cursor. Otherwise delete the\nselected text. ","type":"method"},{"name":"deleteToBeginningOfWord","text":"deleteToBeginningOfWord()","snippet":null,"description":"For each selection, if the selection is empty, delete all characters\nof the containing word that precede the cursor. Otherwise delete the\nselected text. ","type":"method"},{"name":"deleteToEndOfLine","text":"deleteToEndOfLine()","snippet":null,"description":"For each selection, if the selection is not empty, deletes the\nselection; otherwise, deletes all characters of the containing line\nfollowing the cursor. If the cursor is already at the end of the line,\ndeletes the following newline. ","type":"method"},{"name":"deleteToEndOfWord","text":"deleteToEndOfWord()","snippet":null,"description":"For each selection, if the selection is empty, delete all characters\nof the containing word following the cursor. Otherwise delete the selected\ntext. ","type":"method"},{"name":"findMarkers","text":null,"snippet":"findMarkers(${1:properties})","description":"Find all {Marker}s that match the given properties.","type":"method"},{"name":"foldAll","text":"foldAll()","snippet":null,"description":"Fold all foldable lines. ","type":"method"},{"name":"foldAllAtIndentLevel","text":null,"snippet":"foldAllAtIndentLevel(${1:level})","description":"Fold all foldable lines at the given indent level.","type":"method"},{"name":"foldBufferRow","text":null,"snippet":"foldBufferRow(${1:bufferRow})","description":"Fold the given row in buffer coordinates based on its indentation\nlevel.","type":"method"},{"name":"foldCurrentRow","text":"foldCurrentRow()","snippet":null,"description":"Fold the most recent cursor's row based on its indentation level.","type":"method"},{"name":"foldSelectedLines","text":"foldSelectedLines()","snippet":null,"description":"For each selection, fold the rows it intersects. ","type":"method"},{"name":"getBuffer","text":"getBuffer()","snippet":null,"description":"Retrieves the current {TextBuffer}. ","type":"method"},{"name":"getCurrentParagraphBufferRange","text":"getCurrentParagraphBufferRange()","snippet":null,"description":"Get the {Range} of the paragraph surrounding the most recently added\ncursor.","leftLabel":"Range","type":"method"},{"name":"getCursorBufferPosition","text":"getCursorBufferPosition()","snippet":null,"description":"Get the position of the most recently added cursor in buffer\ncoordinates.","leftLabel":"Point","type":"method"},{"name":"getCursorBufferPositions","text":"getCursorBufferPositions()","snippet":null,"description":"Get the position of all the cursor positions in buffer coordinates.","leftLabel":"Array","type":"method"},{"name":"getCursorScreenPosition","text":"getCursorScreenPosition()","snippet":null,"description":"Get the position of the most recently added cursor in screen\ncoordinates.","leftLabel":"Point","type":"method"},{"name":"getCursorScreenPositions","text":"getCursorScreenPositions()","snippet":null,"description":"Get the position of all the cursor positions in screen coordinates.","leftLabel":"Array","type":"method"},{"name":"getCursors","text":"getCursors()","snippet":null,"description":"Get an Array of all {Cursor}s. ","type":"method"},{"name":"getCursorsOrderedByBufferPosition","text":"getCursorsOrderedByBufferPosition()","snippet":null,"description":"Get all {Cursors}s, ordered by their position in the buffer\ninstead of the order in which they were added.","leftLabel":"Array","type":"method"},{"name":"getDecorations","text":null,"snippet":"getDecorations(${1:propertyFilter})","description":"Get all decorations.","leftLabel":"Array","type":"method"},{"name":"getEncoding","text":"getEncoding()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getGrammar","text":"getGrammar()","snippet":null,"description":"Get the current {Grammar} of this editor. ","type":"method"},{"name":"getHighlightDecorations","text":null,"snippet":"getHighlightDecorations(${1:propertyFilter})","description":"Get all decorations of type 'highlight'.","leftLabel":"Array","type":"method"},{"name":"getLastBufferRow","text":"getLastBufferRow()","snippet":null,"description":"","leftLabel":"Number","type":"method"},{"name":"getLastCursor","text":"getLastCursor()","snippet":null,"description":"","leftLabel":"Cursor","type":"method"},{"name":"getLastScreenRow","text":"getLastScreenRow()","snippet":null,"description":"","leftLabel":"Number","type":"method"},{"name":"getLastSelection","text":"getLastSelection()","snippet":null,"description":"Get the most recently added {Selection}.","leftLabel":"Selection","type":"method"},{"name":"getLineCount","text":"getLineCount()","snippet":null,"description":"","leftLabel":"Number","type":"method"},{"name":"getLineDecorations","text":null,"snippet":"getLineDecorations(${1:propertyFilter})","description":"Get all decorations of type 'line'.","leftLabel":"Array","type":"method"},{"name":"getLineNumberDecorations","text":null,"snippet":"getLineNumberDecorations(${1:propertyFilter})","description":"Get all decorations of type 'line-number'.","leftLabel":"Array","type":"method"},{"name":"getLongTitle","text":"getLongTitle()","snippet":null,"description":"Get the editor's long title for display in other parts of the UI\nsuch as the window title.","leftLabel":"String","type":"method"},{"name":"getMarker","text":null,"snippet":"getMarker(${1:id})","description":"Get the {Marker} for the given marker id.","type":"method"},{"name":"getMarkerCount","text":"getMarkerCount()","snippet":null,"description":"Get the number of markers in this editor's buffer.","leftLabel":"Number","type":"method"},{"name":"getMarkers","text":"getMarkers()","snippet":null,"description":"Get all {Marker}s. Consider using {::findMarkers} ","type":"method"},{"name":"getOverlayDecorations","text":null,"snippet":"getOverlayDecorations(${1:propertyFilter})","description":"Get all decorations of type 'overlay'.","leftLabel":"Array","type":"method"},{"name":"getPath","text":"getPath()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getPlaceholderText","text":"getPlaceholderText()","snippet":null,"description":"Retrieves the greyed out placeholder of a mini editor.","leftLabel":"String","type":"method"},{"name":"getRootScopeDescriptor","text":"getRootScopeDescriptor()","snippet":null,"description":"","leftLabel":"ScopeDescriptor","type":"method"},{"name":"getScreenLineCount","text":"getScreenLineCount()","snippet":null,"description":"","leftLabel":"Number","type":"method"},{"name":"getSelectedBufferRange","text":"getSelectedBufferRange()","snippet":null,"description":"Get the {Range} of the most recently added selection in buffer\ncoordinates.","leftLabel":"Range","type":"method"},{"name":"getSelectedBufferRanges","text":"getSelectedBufferRanges()","snippet":null,"description":"Get the {Range}s of all selections in buffer coordinates.","leftLabel":"Array","type":"method"},{"name":"getSelectedScreenRange","text":"getSelectedScreenRange()","snippet":null,"description":"Get the {Range} of the most recently added selection in screen\ncoordinates.","leftLabel":"Range","type":"method"},{"name":"getSelectedScreenRanges","text":"getSelectedScreenRanges()","snippet":null,"description":"Get the {Range}s of all selections in screen coordinates.","leftLabel":"Array","type":"method"},{"name":"getSelectedText","text":"getSelectedText()","snippet":null,"description":"Get the selected text of the most recently added selection.","leftLabel":"String","type":"method"},{"name":"getSelections","text":"getSelections()","snippet":null,"description":"Get current {Selection}s.","leftLabel":"Array","type":"method"},{"name":"getSelectionsOrderedByBufferPosition","text":"getSelectionsOrderedByBufferPosition()","snippet":null,"description":"Get all {Selection}s, ordered by their position in the buffer\ninstead of the order in which they were added.","leftLabel":"Array","type":"method"},{"name":"getSoftTabs","text":"getSoftTabs()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"getSoftWrapColumn","text":"getSoftWrapColumn()","snippet":null,"description":"Gets the column at which column will soft wrap ","type":"method"},{"name":"getTabLength","text":"getTabLength()","snippet":null,"description":"Get the on-screen length of tab characters.","leftLabel":"Number","type":"method"},{"name":"getTabText","text":"getTabText()","snippet":null,"description":"Get the text representing a single level of indent.","leftLabel":"String","type":"method"},{"name":"getText","text":"getText()","snippet":null,"description":"","leftLabel":"String","type":"method"},{"name":"getTextInBufferRange","text":null,"snippet":"getTextInBufferRange(${1:range})","description":"Get the text in the given {Range} in buffer coordinates.","leftLabel":"String","type":"method"},{"name":"getTitle","text":"getTitle()","snippet":null,"description":"Get the editor's title for display in other parts of the\nUI such as the tabs.","leftLabel":"String","type":"method"},{"name":"getWordUnderCursor","text":null,"snippet":"getWordUnderCursor(${1:options})","description":"","leftLabel":null,"type":"method"},{"name":"groupChangesSinceCheckpoint","text":"groupChangesSinceCheckpoint()","snippet":null,"description":"Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.","leftLabel":"Boolean","type":"method"},{"name":"hasMultipleCursors","text":"hasMultipleCursors()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"indentLevelForLine","text":"indentLevelForLine()","snippet":null,"description":"Get the indentation level of the given line of text.","leftLabel":"String","type":"method"},{"name":"indentSelectedRows","text":"indentSelectedRows()","snippet":null,"description":"Indent rows intersecting selections by one level. ","type":"method"},{"name":"indentationForBufferRow","text":"indentationForBufferRow()","snippet":null,"description":"Get the indentation level of the given a buffer row.","leftLabel":"Number","type":"method"},{"name":"insertNewline","text":"insertNewline()","snippet":null,"description":"For each selection, replace the selected text with a newline. ","type":"method"},{"name":"insertNewlineAbove","text":"insertNewlineAbove()","snippet":null,"description":"For each cursor, insert a newline at the end of the preceding line. ","type":"method"},{"name":"insertNewlineBelow","text":"insertNewlineBelow()","snippet":null,"description":"For each cursor, insert a newline at beginning the following line. ","type":"method"},{"name":"insertText","text":null,"snippet":"insertText(${1:text}, ${2:options})","description":"For each selection, replace the selected text with the given text.","leftLabel":"Range","type":"method"},{"name":"isBufferRowCommented","text":"isBufferRowCommented()","snippet":null,"description":"Determine if the given row is entirely a comment ","type":"method"},{"name":"isEmpty","text":"isEmpty()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isFoldableAtBufferRow","text":null,"snippet":"isFoldableAtBufferRow(${1:bufferRow})","description":"Determine whether the given row in buffer coordinates is foldable.","leftLabel":"Boolean","type":"method"},{"name":"isFoldableAtScreenRow","text":null,"snippet":"isFoldableAtScreenRow(${1:bufferRow})","description":"Determine whether the given row in screen coordinates is foldable.","leftLabel":"Boolean","type":"method"},{"name":"isFoldedAtBufferRow","text":null,"snippet":"isFoldedAtBufferRow(${1:bufferRow})","description":"Determine whether the given row in buffer coordinates is folded.","leftLabel":"Boolean","type":"method"},{"name":"isFoldedAtCursorRow","text":"isFoldedAtCursorRow()","snippet":null,"description":"Determine whether the most recently added cursor's row is folded.","leftLabel":"Boolean","type":"method"},{"name":"isFoldedAtScreenRow","text":null,"snippet":"isFoldedAtScreenRow(${1:screenRow})","description":"Determine whether the given row in screen coordinates is folded.","leftLabel":"Boolean","type":"method"},{"name":"isModified","text":"isModified()","snippet":null,"description":"","leftLabel":"Boolean","type":"method"},{"name":"isSoftWrapped","text":"isSoftWrapped()","snippet":null,"description":"Determine whether lines in this editor are soft-wrapped.","leftLabel":"Boolean","type":"method"},{"name":"lineTextForBufferRow","text":null,"snippet":"lineTextForBufferRow(${1:bufferRow})","description":"","leftLabel":"String","type":"method"},{"name":"lineTextForScreenRow","text":null,"snippet":"lineTextForScreenRow(${1:screenRow})","description":"","leftLabel":"String","type":"method"},{"name":"lowerCase","text":"lowerCase()","snippet":null,"description":"Convert the selected text to lower case.","type":"method"},{"name":"markBufferPosition","text":null,"snippet":"markBufferPosition(${1:position}, ${2:options})","description":"Mark the given position in buffer coordinates.","leftLabel":"Marker","type":"method"},{"name":"markBufferRange","text":null,"snippet":"markBufferRange(${1:range}, ${2:properties})","description":"Create a marker with the given range in buffer coordinates. This\nmarker will maintain its logical location as the buffer is changed, so if\nyou mark a particular word, the marker will remain over that word even if\nthe word's location in the buffer changes.","leftLabel":"Marker","type":"method"},{"name":"markScreenPosition","text":null,"snippet":"markScreenPosition(${1:position}, ${2:options})","description":"Mark the given position in screen coordinates.","leftLabel":"Marker","type":"method"},{"name":"markScreenRange","text":null,"snippet":"markScreenRange(${1:range}, ${2:properties})","description":"Create a marker with the given range in screen coordinates. This\nmarker will maintain its logical location as the buffer is changed, so if\nyou mark a particular word, the marker will remain over that word even if\nthe word's location in the buffer changes.","leftLabel":"Marker","type":"method"},{"name":"moveDown","text":null,"snippet":"moveDown(${1:lineCount})","description":"Move every cursor down one row in screen coordinates.","type":"method"},{"name":"moveLeft","text":null,"snippet":"moveLeft(${1:columnCount})","description":"Move every cursor left one column.","type":"method"},{"name":"moveRight","text":null,"snippet":"moveRight(${1:columnCount})","description":"Move every cursor right one column.","type":"method"},{"name":"moveToBeginningOfLine","text":"moveToBeginningOfLine()","snippet":null,"description":"Move every cursor to the beginning of its line in buffer coordinates. ","type":"method"},{"name":"moveToBeginningOfNextParagraph","text":"moveToBeginningOfNextParagraph()","snippet":null,"description":"Move every cursor to the beginning of the next paragraph. ","type":"method"},{"name":"moveToBeginningOfNextWord","text":"moveToBeginningOfNextWord()","snippet":null,"description":"Move every cursor to the beginning of the next word. ","type":"method"},{"name":"moveToBeginningOfPreviousParagraph","text":"moveToBeginningOfPreviousParagraph()","snippet":null,"description":"Move every cursor to the beginning of the previous paragraph. ","type":"method"},{"name":"moveToBeginningOfScreenLine","text":"moveToBeginningOfScreenLine()","snippet":null,"description":"Move every cursor to the beginning of its line in screen coordinates. ","type":"method"},{"name":"moveToBeginningOfWord","text":"moveToBeginningOfWord()","snippet":null,"description":"Move every cursor to the beginning of its surrounding word. ","type":"method"},{"name":"moveToBottom","text":"moveToBottom()","snippet":null,"description":"Move every cursor to the bottom of the buffer.","type":"method"},{"name":"moveToEndOfLine","text":"moveToEndOfLine()","snippet":null,"description":"Move every cursor to the end of its line in buffer coordinates. ","type":"method"},{"name":"moveToEndOfScreenLine","text":"moveToEndOfScreenLine()","snippet":null,"description":"Move every cursor to the end of its line in screen coordinates. ","type":"method"},{"name":"moveToEndOfWord","text":"moveToEndOfWord()","snippet":null,"description":"Move every cursor to the end of its surrounding word. ","type":"method"},{"name":"moveToFirstCharacterOfLine","text":"moveToFirstCharacterOfLine()","snippet":null,"description":"Move every cursor to the first non-whitespace character of its line. ","type":"method"},{"name":"moveToNextWordBoundary","text":"moveToNextWordBoundary()","snippet":null,"description":"Move every cursor to the next word boundary. ","type":"method"},{"name":"moveToPreviousWordBoundary","text":"moveToPreviousWordBoundary()","snippet":null,"description":"Move every cursor to the previous word boundary. ","type":"method"},{"name":"moveToTop","text":"moveToTop()","snippet":null,"description":"Move every cursor to the top of the buffer.","type":"method"},{"name":"moveUp","text":null,"snippet":"moveUp(${1:lineCount})","description":"Move every cursor up one row in screen coordinates.","type":"method"},{"name":"mutateSelectedText","text":null,"snippet":"mutateSelectedText(${1:fn})","description":"Mutate the text of all the selections in a single transaction.","type":"method"},{"name":"observeCursors","text":null,"snippet":"observeCursors(${1:callback})","description":"Calls your `callback` when a {Cursor} is added to the editor.\nImmediately calls your callback for each existing cursor.","leftLabel":"Disposable","type":"method"},{"name":"observeDecorations","text":null,"snippet":"observeDecorations(${1:callback})","description":"Calls your `callback` with each {Decoration} added to the editor.\nCalls your `callback` immediately for any existing decorations.","leftLabel":"Disposable","type":"method"},{"name":"observeGrammar","text":null,"snippet":"observeGrammar(${1:callback})","description":"Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed. Immediately calls your callback with\nthe current grammar.","leftLabel":"Disposable","type":"method"},{"name":"observeSelections","text":null,"snippet":"observeSelections(${1:callback})","description":"Calls your `callback` when a {Selection} is added to the editor.\nImmediately calls your callback for each existing selection.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddCursor","text":null,"snippet":"onDidAddCursor(${1:callback})","description":"Calls your `callback` when a {Cursor} is added to the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddDecoration","text":null,"snippet":"onDidAddDecoration(${1:callback})","description":"Calls your `callback` when a {Decoration} is added to the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddSelection","text":null,"snippet":"onDidAddSelection(${1:callback})","description":"Calls your `callback` when a {Selection} is added to the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidChange","text":null,"snippet":"onDidChange(${1:callback})","description":"Invoke the given callback synchronously when the content of the\nbuffer changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeCursorPosition","text":null,"snippet":"onDidChangeCursorPosition(${1:callback})","description":"Calls your `callback` when a {Cursor} is moved. If there are\nmultiple cursors, your callback will be called for each cursor.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeEncoding","text":null,"snippet":"onDidChangeEncoding(${1:callback})","description":"Calls your `callback` when the buffer's encoding has changed.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeGrammar","text":null,"snippet":"onDidChangeGrammar(${1:callback})","description":"Calls your `callback` when the grammar that interprets and\ncolorizes the text has been changed.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeModified","text":null,"snippet":"onDidChangeModified(${1:callback})","description":"Calls your `callback` when the result of {::isModified} changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangePath","text":null,"snippet":"onDidChangePath(${1:callback})","description":"Calls your `callback` when the buffer's path, and therefore title, has changed.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangePlaceholderText","text":null,"snippet":"onDidChangePlaceholderText(${1:callback})","description":"Calls your `callback` when the placeholder text is changed.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeSelectionRange","text":null,"snippet":"onDidChangeSelectionRange(${1:callback})","description":"Calls your `callback` when a selection's screen range changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeSoftWrapped","text":null,"snippet":"onDidChangeSoftWrapped(${1:callback})","description":"Calls your `callback` when soft wrap was enabled or disabled.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeTitle","text":null,"snippet":"onDidChangeTitle(${1:callback})","description":"Calls your `callback` when the buffer's title has changed.","leftLabel":"Disposable","type":"method"},{"name":"onDidConflict","text":null,"snippet":"onDidConflict(${1:callback})","description":"Calls your `callback` when the buffer's underlying file changes on\ndisk at a moment when the result of {::isModified} is true.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroy","text":null,"snippet":"onDidDestroy(${1:callback})","description":"Invoke the given callback when the editor is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"onDidInsertText","text":null,"snippet":"onDidInsertText(${1:callback})","description":"Calls your `callback` adter text has been inserted.","leftLabel":"Disposable","type":"method"},{"name":"onDidRemoveCursor","text":null,"snippet":"onDidRemoveCursor(${1:callback})","description":"Calls your `callback` when a {Cursor} is removed from the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidRemoveDecoration","text":null,"snippet":"onDidRemoveDecoration(${1:callback})","description":"Calls your `callback` when a {Decoration} is removed from the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidRemoveSelection","text":null,"snippet":"onDidRemoveSelection(${1:callback})","description":"Calls your `callback` when a {Selection} is removed from the editor.","leftLabel":"Disposable","type":"method"},{"name":"onDidSave","text":null,"snippet":"onDidSave(${1:callback})","description":"Invoke the given callback after the buffer is saved to disk.","leftLabel":"Disposable","type":"method"},{"name":"onDidStopChanging","text":null,"snippet":"onDidStopChanging(${1:callback})","description":"Invoke `callback` when the buffer's contents change. It is\nemit asynchronously 300ms after the last buffer change. This is a good place\nto handle changes to the buffer without compromising typing performance.","leftLabel":"Disposable","type":"method"},{"name":"onWillInsertText","text":null,"snippet":"onWillInsertText(${1:callback})","description":"Calls your `callback` before text has been inserted.","leftLabel":"Disposable","type":"method"},{"name":"outdentSelectedRows","text":"outdentSelectedRows()","snippet":null,"description":"Outdent rows intersecting selections by one level. ","type":"method"},{"name":"pasteText","text":null,"snippet":"pasteText(${1:options})","description":"For each selection, replace the selected text with the contents of\nthe clipboard.","type":"method"},{"name":"redo","text":"redo()","snippet":null,"description":"Redo the last change. ","type":"method"},{"name":"revertToCheckpoint","text":"revertToCheckpoint()","snippet":null,"description":"Revert the buffer to the state it was in when the given\ncheckpoint was created.","leftLabel":"Boolean","type":"method"},{"name":"save","text":"save()","snippet":null,"description":"Saves the editor's text buffer.","type":"method"},{"name":"saveAs","text":null,"snippet":"saveAs(${1:filePath})","description":"Saves the editor's text buffer as the given path.","type":"method"},{"name":"scan","text":null,"snippet":"scan(${1:regex}, ${2:iterator})","description":"Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.","type":"method"},{"name":"scanInBufferRange","text":null,"snippet":"scanInBufferRange(${1:regex}, ${2:range}, ${3:iterator})","description":"Scan regular expression matches in a given range, calling the given\niterator function on each match.","type":"method"},{"name":"scopeDescriptorForBufferPosition","text":null,"snippet":"scopeDescriptorForBufferPosition(${1:bufferPosition})","description":"Get the syntactic scopeDescriptor for the given position in buffer\ncoordinates. Useful with {Config::get}.","leftLabel":"ScopeDescriptor","type":"method"},{"name":"screenPositionForBufferPosition","text":null,"snippet":"screenPositionForBufferPosition(${1:bufferPosition}, ${2:options})","description":"Convert a position in buffer-coordinates to screen-coordinates.","leftLabel":"Point","type":"method"},{"name":"screenRangeForBufferRange","text":null,"snippet":"screenRangeForBufferRange(${1:bufferRange})","description":"Convert a range in buffer-coordinates to screen-coordinates.","leftLabel":"Range","type":"method"},{"name":"scrollToBottom","text":"scrollToBottom()","snippet":null,"description":"Scrolls the editor to the bottom ","type":"method"},{"name":"scrollToBufferPosition","text":null,"snippet":"scrollToBufferPosition(${1:bufferPosition}, ${2:options})","description":"Scrolls the editor to the given buffer position.","type":"method"},{"name":"scrollToCursorPosition","text":null,"snippet":"scrollToCursorPosition(${1:options})","description":"Scroll the editor to reveal the most recently added cursor if it is\noff-screen.","type":"method"},{"name":"scrollToScreenPosition","text":null,"snippet":"scrollToScreenPosition(${1:screenPosition}, ${2:options})","description":"Scrolls the editor to the given screen position.","type":"method"},{"name":"scrollToTop","text":"scrollToTop()","snippet":null,"description":"Scrolls the editor to the top ","type":"method"},{"name":"selectAll","text":"selectAll()","snippet":null,"description":"Select all text in the buffer.","type":"method"},{"name":"selectDown","text":null,"snippet":"selectDown(${1:rowCount})","description":"Move the cursor of each selection one character downward while\npreserving the selection's tail position.","type":"method"},{"name":"selectLeft","text":null,"snippet":"selectLeft(${1:columnCount})","description":"Move the cursor of each selection one character leftward while\npreserving the selection's tail position.","type":"method"},{"name":"selectLinesContainingCursors","text":"selectLinesContainingCursors()","snippet":null,"description":"For each cursor, select the containing line.","type":"method"},{"name":"selectMarker","text":null,"snippet":"selectMarker(${1:marker})","description":"Select the range of the given marker if it is valid.","leftLabel":"Range","type":"method"},{"name":"selectRight","text":null,"snippet":"selectRight(${1:columnCount})","description":"Move the cursor of each selection one character rightward while\npreserving the selection's tail position.","type":"method"},{"name":"selectToBeginningOfLine","text":"selectToBeginningOfLine()","snippet":null,"description":"Move the cursor of each selection to the beginning of its line\nwhile preserving the selection's tail position.","type":"method"},{"name":"selectToBeginningOfNextParagraph","text":"selectToBeginningOfNextParagraph()","snippet":null,"description":"Expand selections to the beginning of the next paragraph.","type":"method"},{"name":"selectToBeginningOfNextWord","text":"selectToBeginningOfNextWord()","snippet":null,"description":"Expand selections to the beginning of the next word.","type":"method"},{"name":"selectToBeginningOfPreviousParagraph","text":"selectToBeginningOfPreviousParagraph()","snippet":null,"description":"Expand selections to the beginning of the next paragraph.","type":"method"},{"name":"selectToBeginningOfWord","text":"selectToBeginningOfWord()","snippet":null,"description":"Expand selections to the beginning of their containing word.","type":"method"},{"name":"selectToBottom","text":"selectToBottom()","snippet":null,"description":"Selects from the top of the first selection in the buffer to the end\nof the buffer.","type":"method"},{"name":"selectToBufferPosition","text":null,"snippet":"selectToBufferPosition(${1:position})","description":"Select from the current cursor position to the given position in\nbuffer coordinates.","type":"method"},{"name":"selectToEndOfLine","text":"selectToEndOfLine()","snippet":null,"description":"Move the cursor of each selection to the end of its line while\npreserving the selection's tail position.","type":"method"},{"name":"selectToEndOfWord","text":"selectToEndOfWord()","snippet":null,"description":"Expand selections to the end of their containing word.","type":"method"},{"name":"selectToFirstCharacterOfLine","text":"selectToFirstCharacterOfLine()","snippet":null,"description":"Move the cursor of each selection to the first non-whitespace\ncharacter of its line while preserving the selection's tail position. If the\ncursor is already on the first character of the line, move it to the\nbeginning of the line.","type":"method"},{"name":"selectToNextWordBoundary","text":"selectToNextWordBoundary()","snippet":null,"description":"For each selection, move its cursor to the next word boundary while\nmaintaining the selection's tail position.","type":"method"},{"name":"selectToPreviousWordBoundary","text":"selectToPreviousWordBoundary()","snippet":null,"description":"For each selection, move its cursor to the preceding word boundary\nwhile maintaining the selection's tail position.","type":"method"},{"name":"selectToScreenPosition","text":null,"snippet":"selectToScreenPosition(${1:position})","description":"Select from the current cursor position to the given position in\nscreen coordinates.","type":"method"},{"name":"selectToTop","text":"selectToTop()","snippet":null,"description":"Select from the top of the buffer to the end of the last selection\nin the buffer.","type":"method"},{"name":"selectUp","text":null,"snippet":"selectUp(${1:rowCount})","description":"Move the cursor of each selection one character upward while\npreserving the selection's tail position.","type":"method"},{"name":"selectWordsContainingCursors","text":"selectWordsContainingCursors()","snippet":null,"description":"Select the word surrounding each cursor. ","type":"method"},{"name":"selectionIntersectsBufferRange","text":null,"snippet":"selectionIntersectsBufferRange(${1:bufferRange})","description":"Determine if a given range in buffer coordinates intersects a\nselection.","leftLabel":"Boolean","type":"method"},{"name":"setCursorBufferPosition","text":null,"snippet":"setCursorBufferPosition(${1:position}, ${2:options})","description":"Move the cursor to the given position in buffer coordinates.","type":"method"},{"name":"setCursorScreenPosition","text":null,"snippet":"setCursorScreenPosition(${1:position}, ${2:options})","description":"Move the cursor to the given position in screen coordinates.","type":"method"},{"name":"setEncoding","text":null,"snippet":"setEncoding(${1:encoding})","description":"Set the character set encoding to use in this editor's text\nbuffer.","type":"method"},{"name":"setGrammar","text":null,"snippet":"setGrammar(${1:grammar})","description":"Set the current {Grammar} of this editor.","type":"method"},{"name":"setIndentationForBufferRow","text":null,"snippet":"setIndentationForBufferRow(${1:bufferRow}, ${2:newLevel}, ${3:options})","description":"Set the indentation level for the given buffer row.","type":"method"},{"name":"setPlaceholderText","text":null,"snippet":"setPlaceholderText(${1:placeholderText})","description":"Set the greyed out placeholder of a mini editor. Placeholder text\nwill be displayed when the editor has no content.","type":"method"},{"name":"setSelectedBufferRange","text":null,"snippet":"setSelectedBufferRange(${1:bufferRange}, ${2:options})","description":"Set the selected range in buffer coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.","type":"method"},{"name":"setSelectedBufferRanges","text":null,"snippet":"setSelectedBufferRanges(${1:bufferRanges}, ${2:options})","description":"Set the selected ranges in buffer coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.","type":"method"},{"name":"setSelectedScreenRange","text":null,"snippet":"setSelectedScreenRange(${1:screenRange}, ${2:options})","description":"Set the selected range in screen coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.","type":"method"},{"name":"setSelectedScreenRanges","text":null,"snippet":"setSelectedScreenRanges(${1:screenRanges}, ${2:options})","description":"Set the selected ranges in screen coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.","type":"method"},{"name":"setSoftTabs","text":null,"snippet":"setSoftTabs(${1:softTabs})","description":"Enable or disable soft tabs for this editor.","type":"method"},{"name":"setSoftWrapped","text":null,"snippet":"setSoftWrapped(${1:softWrapped})","description":"Enable or disable soft wrapping for this editor.","leftLabel":"Boolean","type":"method"},{"name":"setTabLength","text":null,"snippet":"setTabLength(${1:tabLength})","description":"Set the on-screen length of tab characters. Setting this to a\n{Number} This will override the `editor.tabLength` setting.","type":"method"},{"name":"setText","text":"setText()","snippet":null,"description":"Replaces the entire contents of the buffer with the given {String}. ","type":"method"},{"name":"setTextInBufferRange","text":null,"snippet":"setTextInBufferRange(${1:range}, ${2:text}, ${3:options})","description":"Set the text in the given {Range} in buffer coordinates.","leftLabel":"Range","type":"method"},{"name":"toggleFoldAtBufferRow","text":"toggleFoldAtBufferRow()","snippet":null,"description":"Fold the given buffer row if it isn't currently folded, and unfold\nit otherwise. ","type":"method"},{"name":"toggleLineCommentsInSelection","text":"toggleLineCommentsInSelection()","snippet":null,"description":"Toggle line comments for rows intersecting selections.","type":"method"},{"name":"toggleSoftTabs","text":"toggleSoftTabs()","snippet":null,"description":"Toggle soft tabs for this editor ","type":"method"},{"name":"toggleSoftWrapped","text":"toggleSoftWrapped()","snippet":null,"description":"Toggle soft wrapping for this editor","leftLabel":"Boolean","type":"method"},{"name":"transact","text":null,"snippet":"transact(${1:groupingInterval}, ${2:fn})","description":"Batch multiple operations as a single undo/redo step.","type":"method"},{"name":"transpose","text":"transpose()","snippet":null,"description":"For each selection, transpose the selected text.","type":"method"},{"name":"undo","text":"undo()","snippet":null,"description":"Undo the last change. ","type":"method"},{"name":"unfoldAll","text":"unfoldAll()","snippet":null,"description":"Unfold all existing folds. ","type":"method"},{"name":"unfoldBufferRow","text":null,"snippet":"unfoldBufferRow(${1:bufferRow})","description":"Unfold all folds containing the given row in buffer coordinates.","type":"method"},{"name":"unfoldCurrentRow","text":"unfoldCurrentRow()","snippet":null,"description":"Unfold the most recent cursor's row by one level. ","type":"method"},{"name":"upperCase","text":"upperCase()","snippet":null,"description":"Convert the selected text to upper case.","type":"method"},{"name":"usesSoftTabs","text":"usesSoftTabs()","snippet":null,"description":"Determine if the buffer uses hard or soft tabs.","leftLabel":null,"type":"method"}],"ThemeManager":[{"name":"getActiveThemeNames","text":"getActiveThemeNames()","snippet":null,"description":"Get an array of all the active theme names. ","type":"method"},{"name":"getActiveThemes","text":"getActiveThemes()","snippet":null,"description":"Get an array of all the active themes. ","type":"method"},{"name":"getEnabledThemeNames","text":"getEnabledThemeNames()","snippet":null,"description":"Get the enabled theme names from the config.","leftLabel":null,"type":"method"},{"name":"getLoadedThemeNames","text":"getLoadedThemeNames()","snippet":null,"description":"Get an array of all the loaded theme names. ","type":"method"},{"name":"getLoadedThemes","text":"getLoadedThemes()","snippet":null,"description":"Get an array of all the loaded themes. ","type":"method"},{"name":"onDidChangeActiveThemes","text":null,"snippet":"onDidChangeActiveThemes(${1:callback})","description":"Invoke `callback` when style sheet changes associated with\nupdating the list of active themes have completed.","type":"method"}],"TooltipManager":[{"name":"add","text":null,"snippet":"add(${1:target}, ${2:options})","description":"Add a tooltip to the given element.","leftLabel":"Disposable","type":"method"}],"ViewRegistry":[{"name":"addViewProvider","text":null,"snippet":"addViewProvider(${1:providerSpec})","description":"Add a provider that will be used to construct views in the\nworkspace's view layer based on model objects in its model layer.","leftLabel":"Disposable","type":"method"},{"name":"getView","text":null,"snippet":"getView(${1:object})","description":"Get the view associated with an object in the workspace.","leftLabel":null,"type":"method"}],"Workspace":[{"name":"activateNextPane","text":"activateNextPane()","snippet":null,"description":"Make the next pane active. ","type":"method"},{"name":"activatePreviousPane","text":"activatePreviousPane()","snippet":null,"description":"Make the previous pane active. ","type":"method"},{"name":"addBottomPanel","text":null,"snippet":"addBottomPanel(${1:options})","description":"Adds a panel item to the bottom of the editor window.","leftLabel":"Panel","type":"method"},{"name":"addLeftPanel","text":null,"snippet":"addLeftPanel(${1:options})","description":"Adds a panel item to the left of the editor window.","leftLabel":"Panel","type":"method"},{"name":"addModalPanel","text":null,"snippet":"addModalPanel(${1:options})","description":"Adds a panel item as a modal dialog.","leftLabel":"Panel","type":"method"},{"name":"addOpener","text":null,"snippet":"addOpener(${1:opener})","description":"Register an opener for a uri.","leftLabel":"Disposable","type":"method"},{"name":"addRightPanel","text":null,"snippet":"addRightPanel(${1:options})","description":"Adds a panel item to the right of the editor window.","leftLabel":"Panel","type":"method"},{"name":"addTopPanel","text":null,"snippet":"addTopPanel(${1:options})","description":"Adds a panel item to the top of the editor window above the tabs.","leftLabel":"Panel","type":"method"},{"name":"getActivePane","text":"getActivePane()","snippet":null,"description":"Get the active {Pane}.","leftLabel":"Pane","type":"method"},{"name":"getActivePaneItem","text":"getActivePaneItem()","snippet":null,"description":"Get the active {Pane}'s active item.","leftLabel":"Object","type":"method"},{"name":"getActiveTextEditor","text":"getActiveTextEditor()","snippet":null,"description":"Get the active item if it is an {TextEditor}.","leftLabel":"TextEditor","type":"method"},{"name":"getBottomPanels","text":"getBottomPanels()","snippet":null,"description":"Get an {Array} of all the panel items at the bottom of the editor window. ","type":"method"},{"name":"getLeftPanels","text":"getLeftPanels()","snippet":null,"description":"Get an {Array} of all the panel items to the left of the editor window. ","type":"method"},{"name":"getModalPanels","text":"getModalPanels()","snippet":null,"description":"Get an {Array} of all the modal panel items ","type":"method"},{"name":"getPaneItems","text":"getPaneItems()","snippet":null,"description":"Get all pane items in the workspace.","leftLabel":"Array","type":"method"},{"name":"getPanes","text":"getPanes()","snippet":null,"description":"Get all panes in the workspace.","leftLabel":"Array","type":"method"},{"name":"getRightPanels","text":"getRightPanels()","snippet":null,"description":"Get an {Array} of all the panel items to the right of the editor window. ","type":"method"},{"name":"getTextEditors","text":"getTextEditors()","snippet":null,"description":"Get all text editors in the workspace.","leftLabel":"Array","type":"method"},{"name":"getTopPanels","text":"getTopPanels()","snippet":null,"description":"Get an {Array} of all the panel items at the top of the editor window. ","type":"method"},{"name":"observeActivePane","text":null,"snippet":"observeActivePane(${1:callback})","description":"Invoke the given callback with the current active pane and when\nthe active pane changes.","leftLabel":"Disposable","type":"method"},{"name":"observeActivePaneItem","text":null,"snippet":"observeActivePaneItem(${1:callback})","description":"Invoke the given callback with the current active pane item and\nwith all future active pane items in the workspace.","leftLabel":"Disposable","type":"method"},{"name":"observePaneItems","text":null,"snippet":"observePaneItems(${1:callback})","description":"Invoke the given callback with all current and future panes items\nin the workspace.","leftLabel":"Disposable","type":"method"},{"name":"observePanes","text":null,"snippet":"observePanes(${1:callback})","description":"Invoke the given callback with all current and future panes in the\nworkspace.","leftLabel":"Disposable","type":"method"},{"name":"observeTextEditors","text":null,"snippet":"observeTextEditors(${1:callback})","description":"Invoke the given callback with all current and future text\neditors in the workspace.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddPane","text":null,"snippet":"onDidAddPane(${1:callback})","description":"Invoke the given callback when a pane is added to the workspace.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddPaneItem","text":null,"snippet":"onDidAddPaneItem(${1:callback})","description":"Invoke the given callback when a pane item is added to the\nworkspace.","leftLabel":"Disposable","type":"method"},{"name":"onDidAddTextEditor","text":null,"snippet":"onDidAddTextEditor(${1:callback})","description":"Invoke the given callback when a text editor is added to the\nworkspace.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeActivePane","text":null,"snippet":"onDidChangeActivePane(${1:callback})","description":"Invoke the given callback when the active pane changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidChangeActivePaneItem","text":null,"snippet":"onDidChangeActivePaneItem(${1:callback})","description":"Invoke the given callback when the active pane item changes.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroyPane","text":null,"snippet":"onDidDestroyPane(${1:callback})","description":"Invoke the given callback when a pane is destroyed in the\nworkspace.","leftLabel":"Disposable","type":"method"},{"name":"onDidDestroyPaneItem","text":null,"snippet":"onDidDestroyPaneItem(${1:callback})","description":"Invoke the given callback when a pane item is destroyed.","leftLabel":"Disposable","type":"method"},{"name":"onDidOpen","text":null,"snippet":"onDidOpen(${1:callback})","description":"Invoke the given callback whenever an item is opened. Unlike\n{::onDidAddPaneItem}, observers will be notified for items that are already\npresent in the workspace when they are reopened.","leftLabel":"Disposable","type":"method"},{"name":"onWillDestroyPaneItem","text":null,"snippet":"onWillDestroyPaneItem(${1:callback})","description":"Invoke the given callback when a pane item is about to be\ndestroyed, before the user is prompted to save it.","leftLabel":"Disposable","type":"method"},{"name":"open","text":null,"snippet":"open(${1:uri}, ${2:options})","description":"Opens the given URI in Atom asynchronously.\nIf the URI is already open, the existing item for that URI will be\nactivated. If no URI is given, or no registered opener can open\nthe URI, a new empty {TextEditor} will be created.","leftLabel":"TextEditor","type":"method"},{"name":"paneForItem","text":null,"snippet":"paneForItem(${1:item})","description":"Get the {Pane} containing the given item.","leftLabel":"Pane","type":"method"},{"name":"paneForURI","text":null,"snippet":"paneForURI(${1:uri})","description":"Get the first {Pane} with an item for the given URI.","leftLabel":"Pane","type":"method"},{"name":"panelForItem","text":null,"snippet":"panelForItem(${1:item})","description":"","leftLabel":"Panel","type":"method"},{"name":"reopenItem","text":"reopenItem()","snippet":null,"description":"Asynchronously reopens the last-closed item's URI if it hasn't already been\nreopened.","leftLabel":null,"type":"method"},{"name":"replace","text":null,"snippet":"replace(${1:regex}, ${2:replacementText}, ${3:filePaths}, ${4:iterator})","description":"Performs a replace across all the specified files in the project.","leftLabel":null,"type":"method"},{"name":"scan","text":null,"snippet":"scan(${1:regex}, ${2:options}, ${3:iterator})","description":"Performs a search across all the files in the workspace.","leftLabel":null,"type":"method"}]}