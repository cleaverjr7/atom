trigger:
  branches:
    include:
    - master
    - '*-releases'
pr:
  branches:
    include:
    - '*'

jobs:
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      dev:
        atom_channel: dev
        atom_name: atom-dev
  variables:
    display: ":99"
  steps:
  - template: script/azure-pipelines/linux-install.yml
    parameters:
      atom_channel: $(atom_channel)
      atom_name: $(atom_name)
  - bash: |
      "/tmp/atom/usr/bin/${ATOM_NAME}" --test test/
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      ATOM_GITHUB_BABEL_ENV: coverage
      FORCE_COLOR: 0
      MOCHA_TIMEOUT: 60000
      UNTIL_TIMEOUT: 30000
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Linux $(atom_channel)
    condition: succeededOrFailed()
  - bash: npm run report:coverage
    displayName: generate code coverage reports
    condition: succeededOrFailed()
  - bash: |
      env
      bash <(curl -s https://codecov.io/bash) -n "Linux $(atom_channel)"
    displayName: publish code coverage to CodeCov
    env:
      CODECOV_TOKEN: $(codecov.token)
      VCS_COMMIT_ID: $(Build.SourceVersion)
      VCS_BRANCH_NAME: $[coalesce(variables.System.PullRequest.SourceBranch, variables.Build.SourceBranch)]
      VCS_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)
      CI_JOB_ID: $(Agent.JobName)
      CI_BUILD_ID: $(Build.BuildID)
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultworkingDirectory)/coverage/
    condition: succeededOrFailed()

- job: MacOS
  pool:
    vmImage: macos-10.13
  strategy:
    matrix:
      dev:
        atom_channel: dev
        atom_app: Atom Dev.app
  steps:
  - template: script/azure-pipelines/macos-install.yml
    parameters:
      atom_channel: $(atom_channel)
      atom_app: $(atom_app)
  - bash: |
      "/tmp/atom/${ATOM_APP}/Contents/Resources/app/atom.sh" --test test/
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      ATOM_GITHUB_BABEL_ENV: coverage
      FORCE_COLOR: 0
      MOCHA_TIMEOUT: 60000
      UNTIL_TIMEOUT: 30000
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: MacOS $(atom_channel)
    condition: succeededOrFailed()
  - bash: npm run report:coverage
    displayName: generate code coverage reports
    condition: succeededOrFailed()
  - bash: bash <(curl -s https://codecov.io/bash) -n "MacOS $(atom_channel)"
    displayName: publish code coverage to CodeCov
    env:
      CODECOV_TOKEN: $(codecov.token)
      VCS_COMMIT_ID: $(Build.SourceVersion)
      VCS_BRANCH_NAME: $[coalesce(variables.System.PullRequest.SourceBranch, variables.Build.SourceBranch)]
      VCS_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)
      CI_JOB_ID: $(Agent.JobName)
      CI_BUILD_ID: $(Build.BuildID)
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultworkingDirectory)/coverage/
    condition: succeededOrFailed()

- job: Windows
  pool:
    vmImage: vs2015-win2012r2
  strategy:
    matrix:
      dev:
        atom_channel: dev
        atom_directory: Atom Dev
  steps:
  - template: script/azure-pipelines/windows-install.yml
    parameters:
      atom_channel: $(atom_channel)
      atom_directory: $(atom_directory)
  - powershell: |
      Set-StrictMode -Version Latest
      $script:ATOMROOT = "$env:AGENT_HOMEDIRECTORY/atom"
      $script:ATOM_SCRIPT_PATH = "$script:ATOMROOT\$env:ATOM_DIRECTORY\resources\cli\atom.cmd"

      # Normalize %TEMP% as a long (non 8.3) path.
      $env:TEMP = (Get-Item -LiteralPath $env:TEMP).FullName

      $env:ELECTRON_NO_ATTACH_CONSOLE = "true"
      [Environment]::SetEnvironmentVariable("ELECTRON_NO_ATTACH_CONSOLE", "true", "User")
      $env:ELECTRON_ENABLE_LOGGING = "YES"
      [Environment]::SetEnvironmentVariable("ELECTRON_ENABLE_LOGGING", "YES", "User")

      Write-Host "Running tests"
      & "$script:ATOM_SCRIPT_PATH" --test test 2>&1 | %{ "$_" }

      if ($LASTEXITCODE -ne 0) {
        Write-Host "Specs Failed"
        $host.SetShouldExit($LASTEXITCODE)
        exit
      }
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      ATOM_GITHUB_BABEL_ENV: coverage
      ATOM_GITHUB_SKIP_SYMLINKS: 1
      FORCE_COLOR: 0
      MOCHA_TIMEOUT: 60000
      UNTIL_TIMEOUT: 30000
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Windows $(atom_channel)
    condition: succeededOrFailed()
  - powershell: npm run report:coverage
    displayName: generate code coverage reports
    condition: succeededOrFailed()
  - bash: bash <(curl -s https://codecov.io/bash) -n "Windows $(atom_channel)"
    displayName: publish code coverage to CodeCov
    env:
      CODECOV_TOKEN: $(codecov.token)
      VCS_COMMIT_ID: $(Build.SourceVersion)
      VCS_BRANCH_NAME: $[coalesce(variables.System.PullRequest.SourceBranch, variables.Build.SourceBranch)]
      VCS_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)
      CI_JOB_ID: $(Agent.JobName)
      CI_BUILD_ID: $(Build.BuildID)
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultworkingDirectory)/coverage/
    condition: succeededOrFailed()

- job: Lint
  pool:
    vmImage: ubuntu-16.04
  variables:
    display: ":99"
    atom_channel: dev
  steps:
  - template: script/azure-pipelines/linux-install.yml
    parameters:
      atom_channel: $(atom_channel)
      atom_name: atom-dev
  - bash: /tmp/atom/usr/share/atom-dev/resources/app/apm/node_modules/.bin/npm run lint
    displayName: run the linter

- job: Snapshot
  pool:
    vmImage: ubuntu-16.04
  variables:
    display: ":99"
    atom_channel: dev
  steps:
  - template: script/azure-pipelines/linux-install.yml
    parameters:
      atom_channel: $(atom_channel)
      atom_name: atom-dev
  - bash: /tmp/atom/usr/bin/atom-dev --test test/
    displayName: run tests
    env:
      ATOM_GITHUB_TEST_SUITE: snapshot
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      FORCE_COLOR: 0
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Snapshot
    condition: succeededOrFailed()
