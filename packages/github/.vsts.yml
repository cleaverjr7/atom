jobs:
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  variables:
    display: ":99"
  steps:
  - bash: |
      curl -s -L "https://atom.io/download/deb?channel=dev" \
        -H 'Accept: application/octet-stream' \
        -o 'atom-amd64.deb'
      /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16
      sudo apt-get update && sudo apt-get install -yyq libgconf-2-4 build-essential git libsecret-1-dev
      dpkg-deb -x atom-amd64.deb /tmp/atom
    displayName: install Atom
  - bash: /tmp/atom/usr/share/atom-dev/resources/app/apm/bin/apm ci
    displayName: install dependencies
  - bash: /tmp/atom/usr/bin/atom-dev --test test/
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      FORCE_COLOR: 0
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Linux
    condition: succeededOrFailed()

- job: MacOS
  pool:
    vmImage: macos-10.13
  steps:
  - bash: |
      set -x
      curl -s -L "https://atom.io/download/mac?channel=dev" \
        -H 'Accept: application/octet-stream' \
        -o "atom.zip"
      mkdir -p /tmp/atom
      unzip -q atom.zip -d /tmp/atom
    displayName: install Atom
  - bash: /tmp/atom/Atom\ Dev.app/Contents/Resources/app/apm/bin/apm ci
    displayName: install dependencies
  - bash: /tmp/atom/Atom\ Dev.app/Contents/Resources/app/atom.sh --test test/
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      FORCE_COLOR: 0
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: MacOS
    condition: succeededOrFailed()

- job: Windows
  pool:
    vmImage: vs2015-win2012r2
  steps:
  - powershell: |
      Set-StrictMode -Version Latest
      $script:ATOMROOT = "$env:AGENT_HOMEDIRECTORY/atom"

      Write-Host "Downloading latest Atom release"
      $source = "https://atom.io/download/windows_zip?channel=dev"
      $destination = "atom.zip"

      (New-Object System.Net.WebClient).DownloadFile($source, $destination)
      Expand-Archive -Path "atom.zip" -DestinationPath $script:ATOMROOT
    displayName: install Atom
  - powershell: |
      Set-StrictMode -Version Latest
      $script:ATOMROOT = "$env:AGENT_HOMEDIRECTORY/atom"
      $script:APM_SCRIPT_PATH = "$script:ATOMROOT\Atom Dev\resources\app\apm\bin\apm.cmd"

      Write-Host "Installing package dependencies"
      & "$script:APM_SCRIPT_PATH" ci
      if ($LASTEXITCODE -ne 0) {
        Write-Host "Dependency installation failed"
        $host.SetShouldExit($LASTEXITCODE)
        exit
      }
    displayName: install dependencies
  - powershell: |
      Set-StrictMode -Version Latest
      $script:ATOMROOT = "$env:AGENT_HOMEDIRECTORY/atom"
      $script:ATOM_SCRIPT_PATH = "$script:ATOMROOT\Atom Dev\resources\cli\atom.cmd"

      # Normalize %TEMP% as a long (non 8.3) path.
      $env:TEMP = (Get-Item -LiteralPath $env:TEMP).FullName

      $env:ELECTRON_NO_ATTACH_CONSOLE = "true"
      [Environment]::SetEnvironmentVariable("ELECTRON_NO_ATTACH_CONSOLE", "true", "User")
      $env:ELECTRON_ENABLE_LOGGING = "YES"
      [Environment]::SetEnvironmentVariable("ELECTRON_ENABLE_LOGGING", "YES", "User")

      Write-Host "Running tests"
      & "$script:ATOM_SCRIPT_PATH" --test test 2>&1 | %{ "$_" }

      if ($LASTEXITCODE -ne 0) {
        Write-Host "Specs Failed"
        $host.SetShouldExit($LASTEXITCODE)
        exit
      }
    displayName: run tests
    env:
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      FORCE_COLOR: 0
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Windows
    condition: succeededOrFailed()

- job: Lint
  pool:
    vmImage: ubuntu-16.04
  variables:
    display: ":99"
  steps:
  - bash: |
      curl -s -L "https://atom.io/download/deb?channel=dev" \
        -H 'Accept: application/octet-stream' \
        -o 'atom-amd64.deb'
      /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16
      sudo apt-get update && sudo apt-get install -yyq libgconf-2-4 build-essential git libsecret-1-dev
      dpkg-deb -x atom-amd64.deb /tmp/atom
    displayName: install Atom
  - bash: /tmp/atom/usr/share/atom-dev/resources/app/apm/bin/apm ci
    displayName: install dependencies
  - bash: /tmp/atom/usr/share/atom-dev/resources/app/apm/node_modules/.bin/npm run lint
    displayName: run the linter

- job: Snapshot
  pool:
    vmImage: ubuntu-16.04
  variables:
    display: ":99"
  steps:
  - bash: |
      curl -s -L "https://atom.io/download/deb?channel=dev" \
        -H 'Accept: application/octet-stream' \
        -o 'atom-amd64.deb'
      /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16
      sudo apt-get update && sudo apt-get install -yyq libgconf-2-4 build-essential git libsecret-1-dev
      dpkg-deb -x atom-amd64.deb /tmp/atom
    displayName: install Atom
  - bash: /tmp/atom/usr/share/atom-dev/resources/app/apm/bin/apm ci
    displayName: install dependencies
  - bash: /tmp/atom/usr/bin/atom-dev --test test/
    displayName: run tests
    env:
      ATOM_GITHUB_TEST_SUITE: snapshot
      TEST_JUNIT_XML_PATH: $(Agent.HomeDirectory)/test-results.xml
      FORCE_COLOR: 0
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: $(Agent.HomeDirectory)/test-results.xml
      testRunTitle: Snapshot
    condition: succeededOrFailed()
