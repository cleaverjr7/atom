'scopeName': 'source.coffee'
'name': 'CoffeeScript'
'fileTypes': [
  'coffee'
  'Cakefile'
  'coffee.erb'
  'cson'
  '_coffee'
]
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    coffee
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      coffee
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      coffee
    (?=\\s|:|$)
  )
'''
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.operator.new.coffee'
      '4':
        'name': 'storage.type.class.coffee'
      '6':
        'name': 'entity.name.type.instance.coffee'
      '7':
        'name': 'entity.name.type.instance.coffee'
    'match': '(new)\\s+(((class)(\\s+(\\w+(?:\\.\\w*)*))?)|(\\w+(?:\\.\\w*)*))'
    'name': 'meta.class.instance.constructor'
  }
  {
    'begin': '\'\'\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '\'\'\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.quoted.heredoc.coffee'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.quoted.double.heredoc.coffee'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.coffee'
      }
      {
        'include': '#interpolated_coffee'
      }
    ]
  }
  {
    'begin': '`'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.coffee'
    'end': '`'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.coffee'
    'name': 'string.quoted.script.coffee'
    'patterns': [
      {
        'match': '(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.coffee'
      }
    ]
  }
  {
    'begin': '(?<!#)###(?!#)'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.coffee'
    'end': '###(?:[ \\t]*\\n)'
    'name': 'comment.block.coffee'
    'patterns': [
      {
        'match': '(?<=^|\\s)@\\w*(?=\\s)'
        'name': 'storage.type.annotation.coffee'
      }
    ]
  }
  {
    'begin': '#'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.coffee'
    'end': '$'
    'name': 'comment.line.number-sign.coffee'
  }
  {
    'begin': '/{3}'
    'end': '(/{3})[imgy]{0,4}'
    'name': 'string.regexp.coffee'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.js'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.js'

    'patterns': [
      {
        'include': '#heregexp'
      }
    ]

  }
  {
    'begin': '/(?=(?![ /*+?])([^\\\\]|\\\\.)*?/[igmy]{0,4}(?![a-zA-Z0-9]))'
    'end': '(/)[imgy]{0,4}'
    'name': 'string.regexp.coffee'
    'patterns': [
      {
        'include': 'source.js.regexp'
      }
    ]
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.js'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.js'
  }
  {
    'match': '\\b(?<![\\.\\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|(?<=for)\\s+own)(?!\\s*:)\\b'
    'name': 'keyword.control.coffee'
  }
  {
    'match': '(and|or|<<|>>>?|(?<!\\()\\/|[=!<>*%+\\-&^])?=(?!>)|[!%^*\\/~?:]|\\-?\\-(?!>)|\\+\\+?|<>|<|>|&&?|\\.\\.\\.?|\\|\\|?|\\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)(?!\\s*:)\\b'
    'name': 'keyword.operator.coffee'
  }
  {
    'match': '\\b(?<![\\.\\$])(case|default|function|var|void|with|const|let|enum|export|import|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static|yield)(?!\\s*:)\\b'
    'name': 'keyword.reserved.coffee'
  }
  {
    # a: -> ...
    # a: (args) -> ...
    'begin': '''(?x)
      \\b((@)?[a-zA-Z_$][\\w$]*)
      \\s*([:=])\\s*
      (?=(\\([^\\(\\)]*\\))?\\s*[=-]>)
    '''
    'beginCaptures':
      '1':
        'name': 'entity.name.function.coffee'
      '2':
        'name': 'variable.other.readwrite.instance.coffee'
      '3':
        'name': 'keyword.operator.coffee'
    'end': '[=-]>'
    'endCaptures':
      '0':
        'name': 'storage.type.function.coffee'
    'name': 'meta.function.coffee'
    'patterns': [
      {
        'include': '#function_params'
      }
    ]
  }
  {
    # a -> ...
    # (args) -> ...
    # -> ...
    'begin': '(?=(\\([^\\(\\)]*\\))?\\s*[=-]>)'
    'end': '[=-]>'
    'endCaptures':
      '0':
        'name': 'storage.type.function.coffee'
    'name': 'meta.function.inline.coffee'
    'patterns': [
      {
        'include': '#function_params'
      }
    ]
  }
  {
    'match': '([a-zA-Z$_][\\w$]*)\\s*(?!::)(?:(:)|((?:or|and|[-+\\/&%*?])?=)(?![>=]))'
    'captures':
      '1':
        'name': 'variable.assignment.coffee'
      '2':
        'name': 'punctuation.separator.key-value'
      '3':
        'name': 'keyword.operator.coffee'
  }
  {
    'begin': '(?<=\\s|^)({)(?=[^\'"#]+?}\\s*(\\]|}|=))'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.begin.bracket.curly.coffee'
    'end': '(})(?=\\s*(}|\\]|=))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.end.bracket.curly.coffee'
    'name': 'meta.variable.assignment.destructured.object.coffee'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'include': '#variable_name'
      }
    ]
  }
  {
    'begin': '(?<=\\s|^)(\\[)(?=[^\'"#]+?\\]\\s*(\\]|}|=))'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.begin.bracket.square.coffee'
    'end': '(\\])(?=\\s*(}|\\]|=))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.destructuring.end.bracket.square.coffee'
    'name': 'meta.variable.assignment.destructured.array.coffee'
    'patterns': [
      {
        'include': '$self'
      }
      {
        'include': '#variable_name'
      }
    ]
  }
  {
    'match': '\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.boolean.true.coffee'
  }
  {
    'match': '\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.boolean.false.coffee'
  }
  {
    'match': '\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.null.coffee'
  }
  {
    'match': '\\b(?<!\\.|::)extends(?!\\s*[:=])\\b'
    'name': 'variable.language.coffee'
  }
  {
    'match': '\\b(?<!\\.)this(?!\\s*[:=][^=])\\b'
    'name': 'variable.language.this.coffee'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.class.coffee'
      '2':
        'name': 'keyword.control.inheritance.coffee'
      '3':
        'name': 'entity.other.inherited-class.coffee'
    'match': '(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)'
    'name': 'meta.class.coffee'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.class.coffee'
      '2':
        'name': 'entity.name.type.class.coffee'
      '3':
        'name': 'keyword.control.inheritance.coffee'
      '4':
        'name': 'entity.other.inherited-class.coffee'
    'match': '(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?'
    'name': 'meta.class.coffee'
  }
  {
    'match': '\\b(debugger|\\\\)\\b'
    'name': 'keyword.other.coffee'
  }
  {
    'match': '\\b(Array|ArrayBuffer|Blob|Boolean|Date|document|Function|Int(8|16|32|64)Array|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest)\\b'
    'name': 'support.class.coffee'
  }
  {
    'match': '\\b(console)\\b'
    'name': 'entity.name.type.object.coffee'
  }
  {
    'match': '((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b'
    'name': 'support.function.console.coffee'
  }
  {
    'match': '((?<=\\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\\b'
    'name': 'support.function.method.array.coffee'
  }
  {
    'match': '((?<=Array\\.)(isArray))\\b'
    'name': 'support.function.static.array.coffee'
  }
  {
    'match': '((?<=Object\\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\\b'
    'name': 'support.function.static.object.coffee'
  }
  {
    'match': '((?<=Math\\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\\b'
    'name': 'support.function.static.math.coffee'
  }
  {
    'match': '((?<=Number\\.)(is(Finite|Integer|NaN)|toInteger))\\b'
    'name': 'support.function.static.number.coffee'
  }
  {
    'match': '(?<!\\.)\\b(module|exports|__filename|__dirname|global|process)(?!\\s*:)\\b'
    'name': 'support.variable.coffee'
  }
  {
    'match': '\\b(Infinity|NaN|undefined)\\b'
    'name': 'constant.language.coffee'
  }
  {
    'include': '#method_calls'
  }
  {
    'include': '#function_calls'
  }
  {
    'include': '#objects'
  }
  {
    'include': '#properties'
  }
  {
    'match': '\\;'
    'name': 'punctuation.terminator.statement.coffee'
  }
  {
    'match': ','
    'name': 'meta.delimiter.object.comma.coffee'
  }
  {
    'match': '\\.'
    'name': 'meta.delimiter.method.period.coffee'
  }
  {
    'begin': '{'
    'beginCaptures':
      '0':
        'name': 'meta.brace.curly.coffee'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'meta.brace.curly.coffee'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'meta.brace.round.coffee'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'meta.brace.round.coffee'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'match': '\\[|\\]'
    'name': 'meta.brace.square.coffee'
  }
  {
    'include': '#instance_variable'
  }
  {
    'include': '#single_quoted_string'
  }
  {
    'include': '#double_quoted_string'
  }
  {
    'include': '#numeric'
  }
]
'repository':
  'arguments':
    'patterns': [
      {
        'begin': '(?=(@?\\w+|[=-]>|\\-\\d|\\[|\\{|\"|\'))|\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.arguments.begin.bracket.round.coffee'
        'end': '\\)|(?=\\s*\\b(of|in|then|is|isnt|and|or|for|else|when|not|if|unless)\\b)|(?=\\s*(#|$))'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.arguments.end.bracket.round.coffee'
        'name': 'meta.arguments.coffee'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'double_quoted_string':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.coffee'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.coffee'
        'name': 'string.quoted.double.coffee'
        'patterns': [
          {
            'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.coffee'
          }
          {
            'include': '#interpolated_coffee'
          }
        ]
      }
    ]
  'function_calls':
    'patterns': [
      {
        # functionCall(arg1, "arg2", [...])
        'begin': '''(?x)
          (@)?([\\w$]+)
          \\s*
          (?=\\s+(?!\\b(of|in|then|is|isnt|and|or|for|else|when|not|if|unless)\\b)(?=(@?\\w+|[=-]>|\\-\\d|\\[|\\{|\"|\'))|(?=\\())
        '''
        'beginCaptures':
          '1':
            'name': 'variable.other.readwrite.instance.coffee'
          '2':
            'patterns': [
              {
                'match': '''(?x)
                  \\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|
                  decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|
                  require|set(Interval|Timeout)|clear(Interval|Timeout))\\b
                '''
                'name': 'support.function.coffee'
              }
              {
                'match': "[a-zA-Z_$][\\w$]*"
                'name': 'entity.name.function.coffee'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.coffee'
              }
            ]
        'end': '(?<=\\))|(?=\\s*\\b(of|in|then|is|isnt|and|or|for|else|when|not|if|unless)\\b)|(?=\\s*(#|$))'
        'name': 'meta.function-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
    ]
  'function_params':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.parameters.begin.bracket.round.coffee'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameters.end.bracket.round.coffee'
        'name': 'meta.parameters.coffee'
        'patterns': [
          {
            'match': '([a-zA-Z_$][\\w$]*)(\\.\\.\\.)?'
            'captures':
              '1':
                'name': 'variable.parameter.function.coffee'
              '2':
                'name': 'keyword.operator.splat.coffee'
          }
          {
            'match': '(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?'
            'captures':
              '1':
                'name': 'variable.parameter.function.readwrite.instance.coffee'
              '2':
                'name': 'keyword.operator.splat.coffee'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  'embedded_comment':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.coffee'
        'match': '(?<!\\\\)(#).*$\\n?'
        'name': 'comment.line.number-sign.coffee'
      }
    ]
  'instance_variable':
    'patterns': [
      {
        'match': '(@)([a-zA-Z_\\$]\\w*)?'
        'name': 'variable.other.readwrite.instance.coffee'
      }
    ]
  'interpolated_coffee':
    'patterns': [
      {
        'begin': '\\#\\{'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.coffee'
        'end': '\\}'
        'name': 'source.coffee.embedded.source'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'method_calls':
    'patterns': [
      {
        # .methodCall(arg1, "arg2", [...])
        'begin': '(\\.)\\s*([\\w$]+)\\s*(?=\\s+(?!\\b(of|in|then|is|isnt|and|or|for|else|when|not|if|unless)\\b)(?=(@?\\w+|[=-]>|\\-\\d|\\[|\\{|\"|\'))|(?=\\())'
        'beginCaptures':
          '1':
            'name': 'meta.delimiter.method.period.coffee'
          '2':
            'patterns': [
              {
                'match': '''(?x)
                  \\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
                  Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
                  Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|
                  Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
                  Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
                  Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
                  Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
                  Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b
                '''
                'name': 'support.function.event-handler.coffee'
              }
              {
                'match': '''(?x)
                  \\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
                  scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
                  sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|
                  Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
                  Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
                  savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
                  contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
                  createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
                  test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
                  untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
                  print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
                  fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
                  forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
                  abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
                  releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
                  Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
                  Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
                  moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b
                '''
                'name': 'support.function.coffee'
              }
              {
                'match': '''(?x)
                  \\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
                  appendChild|appendData|before|blur|canPlayType|captureStream|
                  caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
                  cloneContents|cloneNode|cloneRange|close|closest|collapse|
                  compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
                  convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
                  createAttributeNS|createCaption|createCDATASection|createComment|
                  createContextualFragment|createDocument|createDocumentFragment|
                  createDocumentType|createElement|createElementNS|createEntityReference|
                  createEvent|createExpression|createHTMLDocument|createNodeIterator|
                  createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
                  createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
                  deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
                  deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
                  enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
                  exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
                  getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
                  getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
                  getClientRects|getContext|getDestinationInsertionPoints|getElementById|
                  getElementsByClassName|getElementsByName|getElementsByTagName|
                  getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
                  getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
                  hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
                  insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
                  insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
                  isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
                  lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
                  moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
                  parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
                  previousSibling|probablySupportsContext|queryCommandEnabled|
                  queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
                  querySelector|querySelectorAll|registerContentHandler|registerElement|
                  registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
                  removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
                  removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
                  requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
                  scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
                  setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
                  setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
                  setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
                  slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
                  submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
                  toDataURL|toggle|toString|values|write|writeln)\\b
                '''
                'name': 'support.function.dom.coffee'
              }
              {
                'match': "[a-zA-Z_$][\\w$]*"
                'name': 'entity.name.function.coffee'
              }
              {
                'match': '\\d[\\w$]*'
                'name': 'invalid.illegal.identifier.coffee'
              }
            ]
        'end': '(?<=\\))|(?=\\s*\\b(of|in|then|is|isnt|and|or|for|else|when|not|if|unless)\\b)|(?=\\s*(#|$))'
        'name': 'meta.method-call.coffee'
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
      }
    ]
  'numeric':
    'patterns': [
      {
        'match': '(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b'
        'name': 'constant.numeric.coffee'
      }
    ]
  'objects':
    'patterns': [
      {
        # OBJ in OBJ.prop, OBJ.methodCall()
        'match': '[A-Z][A-Z0-9_$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'name': 'constant.other.object.coffee'
      }
      {
        # obj in obj.prop, obj.methodCall()
        'match': '[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'name': 'variable.other.object.coffee'
      }
    ]
  'properties':
    'patterns': [
      {
        # PROP1 in obj.PROP1.prop2, func().PROP1.prop2
        'match': '(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.coffee'
          '2':
            'name': 'constant.other.object.property.coffee'
      }
      {
        # prop1 in obj.prop1.prop2, func().prop1.prop2
        'match': '(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.coffee'
          '2':
            'name': 'variable.other.object.property.coffee'
      }
      {
        # PROP in obj.PROP, func().PROP
        'match': '(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.coffee'
          '2':
            'name': 'constant.other.property.coffee'
      }
      {
        # prop in obj.prop, func().prop
        'match': '(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.coffee'
          '2':
            'name': 'variable.other.property.coffee'
      }
      {
        # 123illegal in obj.123illegal, func().123illegal
        'match': '(\\.)\\s*([0-9][\\w$]*)'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.coffee'
          '2':
            'name': 'invalid.illegal.identifier.coffee'
      }
    ]
  'single_quoted_string':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.coffee'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.coffee'
        'name': 'string.quoted.single.coffee'
        'patterns': [
          {
            'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.coffee'
          }
        ]
      }
    ]
  'variable_name':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.assignment.coffee'
        'match': '([a-zA-Z\\$_]\\w*(\\.\\w+)*)'
        'name': 'variable.assignment.coffee'
      }
    ]
  'regex-character-class':
    'patterns': [
      {
        'match': '\\\\[wWsSdD]|\\.'
        'name': 'constant.character.character-class.regexp'
      }
      {
        'match': '\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'match': '\\\\c[A-Z]'
        'name': 'constant.character.control.regexp'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]
  'heregexp':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()((\\?=)|(\\?!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '3':
            'name': 'meta.assertion.look-ahead.regexp'
          '4':
            'name': 'meta.assertion.negative-look-ahead.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.assertion.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '\\((\\?:)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
        'name': 'constant.other.character-class.set.regexp'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.character.numeric.regexp'
              '2':
                'name': 'constant.character.control.regexp'
              '3':
                'name': 'constant.character.escape.backslash.regexp'
              '4':
                'name': 'constant.character.numeric.regexp'
              '5':
                'name': 'constant.character.control.regexp'
              '6':
                'name': 'constant.character.escape.backslash.regexp'
            'match': '(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class'
          }
        ]
      }
      {
        'include': '#regex-character-class'
      }
      {
        'include': '#interpolated_coffee'
      }
      {
        'include': '#embedded_comment'
      }
    ]
