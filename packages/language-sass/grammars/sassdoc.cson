'scopeName': 'source.sassdoc'
'name': 'SassDoc'
'patterns': [
  {
    # @access private|public
    'match': '''(?x)
      ((@)(?:access))
      \\s+
      (private|public)
      \\b
    '''
    'captures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
      '3':
        'name': 'constant.language.access-type.sassdoc'
  }
  {
    # @author name [<email>]
    'match': '''(?x)
      ((@)author)
      \\s+
      (
        [^@\\s<>*/]
        (?:[^@<>*/]|\\*[^/])*
      )
      (?:
        \\s*
        (<)
        ([^>\\s]+)
        (>)
      )?
    '''
    'captures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
      '3':
        'name': 'entity.name.type.instance.sassdoc'
      '4':
        'name': 'punctuation.definition.bracket.angle.begin.sassdoc'
      '5':
        'name': 'constant.other.email.link.underline.sassdoc'
      '6':
        'name': 'punctuation.definition.bracket.angle.end.sassdoc'
  }
  {
    # @example text();
    'name': 'meta.example.sassdoc'
    'begin': '((@)example)\\s+'
    'end': '(?=@|///$)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
    'patterns': [
      {
        'match': '^///\\s+'
      }
      {
        # Leading <caption>…</caption> before example
        'contentName': 'constant.other.description.sassdoc'
        'begin': '\\G(<)caption(>)'
        'beginCaptures':
          '0':
            'name': 'entity.name.tag.inline.sassdoc'
          '1':
            'name': 'punctuation.definition.bracket.angle.begin.sassdoc'
          '2':
            'name': 'punctuation.definition.bracket.angle.end.sassdoc'
        'end': '(</)caption(>)|(?=///$)'
        'endCaptures':
          '0':
            'name': 'entity.name.tag.inline.sassdoc'
          '1':
            'name': 'punctuation.definition.bracket.angle.begin.sassdoc'
          '2':
            'name': 'punctuation.definition.bracket.angle.end.sassdoc'
      }
      {
        # Highlighted JavaScript example
        'match': '[^\\s@*](?:[^*]|\\*[^/])*'
        'captures':
          '0':
            'name': 'source.embedded.js'
            'patterns': [
              {
                'include': 'source.js'
              }
            ]
      }
    ]
  },
  {
    # @see namepathOrURL
    'match': '''(?x)
      ((@)see)
      \\s+
      (?:
        # URL
        (
          (?=https?://)
          (?:[^\\s*]|\\*[^/])+
        )
        |
        # JSDoc namepath
        (
          (?!
            # Avoid matching bare URIs (also acceptable as links)
            https?://
            |
            # Avoid matching {@inline tags}; we match those below
            (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}
            {@(?:link|linkcode|linkplain|tutorial)\\b
          )
          # Matched namepath
          (?:[^@\\s*/]|\\*[^/])+
        )
      )
    '''
    'captures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
      '3':
        'name': 'variable.other.link.underline.sassdoc'
      '4':
        'name': 'entity.name.type.instance.sassdoc'
  }
  {
    # Tags followed by an identifier token
    # - @<tag> identifier
    'match': '''(?x)
      (
        (@)
        (?:arg|argument|param|parameter)
      )
      \\s+
      (
        [A-Za-z_$]
        [\\w$.\\[\\]]*
      )
    '''
    'captures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
      '3':
        'name': 'variable.other.sassdoc'
  }
  {
    # Tags followed by a type expression, then an identifier
    # -  @<tag> {type} identifier
    'begin': '((@)(?:arg|argument|param|parameter|prop|property))\\s+(?={)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
    'end': '(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])'
    'patterns': [
      {
        'include': '#sassdoctype'
      }
      {
        'match': '([A-Za-z_$][\\w$.\\[\\]]*)'
        'name': 'variable.other.sassdoc'
      }
      {
        # Optional value
        'name': 'variable.other.sassdoc'
        'match': '''(?x)
          (\\[)\\s*
          [\\w$]+
          (?:
            (?:\\[\\])?                                        # Foo[].bar properties within an array
            \\.                                                # Foo.Bar namespaced parameter
            [\\w$]+
          )*
          (?:
            \\s*
            (=)                                                # [foo=bar] Default parameter value
            \\s*
            (
              # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
              (?>
                "(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |  # [foo="bar"] Double-quoted
                '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |  # [foo='bar'] Single-quoted
                \\[ (?:(?:\\*(?!/))|[^*])*? \\] |              # [foo=[1,2]] Array literal
                (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])* # Everything else (sorry)
              )*
            )
          )?
          \\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))
        '''
        'captures':
          '1':
            'name': 'punctuation.definition.optional-value.begin.bracket.square.sassdoc'
          '2':
            'name': 'keyword.operator.assignment.sassdoc'
          '3':
            'name': 'source.embedded.js'
            'patterns': [
              {
                'include': '#inline-tags'
              }
              {
                'include': 'source.js'
              }
            ]
          '4':
            'name': 'punctuation.definition.optional-value.end.bracket.square.sassdoc'
          '5':
            'name': 'invalid.illegal.syntax.sassdoc'
      }
    ]
  }
  {
    # Tags followed by a type expression
    # -  @<tag> {type}
    'begin': '''(?x)
      (
        (@)
        (?:returns?|throws?|exception|type|outputs?)
      )
      \\s+(?={)
    '''
    'beginCaptures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
    'end': '(?=\\s|[^{}\\[\\]A-Za-z_$])'
    'patterns': [
      {
        'include': '#sassdoctype'
      }
    ]
  }
  {
    # Tags followed by a namepath
    # -  @<tag> namepath
    'match': '''(?x)
      (
        (@)
        (?:alias|group|name|requires?|see)
      )
      \\s+
      (
        (?:
          [^{}@\\s*] | \\*[^/]
        )+
      )
    '''
    'captures':
      '1':
        'name': 'storage.type.class.sassdoc'
      '2':
        'name': 'punctuation.definition.block.tag.sassdoc'
      '3':
        'name': 'entity.name.type.instance.sassdoc'
  }
  {
    'name': 'storage.type.class.sassdoc',
    'match': '''(?x)
      (@)
      (?:access|alias|author|content|deprecated|example|exception|group
      |ignore|name|prop|property|requires?|returns?|see|since|throws?|todo
      |type|outputs?)
      \\b
    '''
    'captures':
      '1':
        'name': 'punctuation.definition.block.tag.sassdoc'
  }
  {
    'include': '#inline-tags'
  }
]

'repository':
  # Balanced brackets (square or curly)
  'brackets':
    'patterns': [
      {
        'begin': '{'
        'end': '}|(?=$)'
        'patterns': [
          {
            'include': '#brackets'
          }
        ]
      }
      {
        'begin': '\\['
        'end': '\\]|(?=$)'
        'patterns': [
          {
            'include': '#brackets'
          }
        ]
      }
    ]

  'inline-tags':
    'patterns': [
      {
        # Description preceding {@inline tag}
        'captures':
          '1':
            'name': 'punctuation.definition.bracket.square.begin.sassdoc'
          '2':
            'name': 'punctuation.definition.bracket.square.end.sassdoc'
        'match': '(\\[)[^\\]]+(\\])(?={@(?:link))'
        'name': 'constant.other.description.sassdoc'
      }
      {
        # {@link …}
        'begin': '({)((@)(?:link))\\s*'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.bracket.curly.begin.sassdoc'
          '2':
            'name': 'storage.type.class.sassdoc'
          '3':
            'name': 'punctuation.definition.inline.tag.sassdoc'
        'end': '}|(?=$)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.bracket.curly.end.sassdoc'
        'name': 'entity.name.type.instance.sassdoc'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'variable.other.link.underline.sassdoc'
              '2':
                'name': 'punctuation.separator.pipe.sassdoc'
            'match': '\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?'
          }
          {
            'captures':
              '1':
                'name': 'variable.other.description.sassdoc'
              '2':
                'name': 'punctuation.separator.pipe.sassdoc'
            'match': '\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?'
          }
        ]
      }
    ]

  # {type}
  'sassdoctype':
    'patterns': [
      {
        # {unclosed
        'name': 'invalid.illegal.type.sassdoc'
        'match': '\\G{(?:[^}*]|\\*[^/}])+$'
      }
      {
        'begin': '\\G({)'
        'beginCaptures':
          '0':
            'name': 'entity.name.type.instance.sassdoc'
          '1':
            'name': 'punctuation.definition.bracket.curly.begin.sassdoc'
        'contentName': 'entity.name.type.instance.sassdoc'
        'end': '((}))\\s*|(?=$)'
        'endCaptures':
          '1':
            'name': 'entity.name.type.instance.sassdoc'
          '2':
            'name': 'punctuation.definition.bracket.curly.end.sassdoc'
        'patterns': [
          {
            'include': '#brackets'
          }
        ]
      }
    ]
