{
  "beforeRunningCommand": "nop",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\n\nclass String\n  def escape(char)\n    gsub(/\\\\.|#{Regexp.quote(char)}/) { |match| match == char ? \"\\\\#{char}\" : match }\n  end\n\n  def unescape(char)\n    gsub(/\\\\./) { |match| match == \"\\\\#{char}\" ? char : match }\n  end\nend\n\nprint case str = STDIN.read\n  # Handle standard quotes\n  when /\\A\"(.*)\"\\z/m;          \"'\"   + $1.unescape('\"').escape(\"'\") + \"'\"\n  when /\\A'(.*)'\\z/m;          \"%Q{\" + $1.unescape(\"'\").escape(\"}\") + \"}\"\n  when /\\A%[Qq]?\\{(.*)\\}\\z/m;  '\"'   + $1.unescape(\"}\").escape('\"') + '\"'\n\n  # Handle the more esoteric quote styles\n  when /\\A%[Qq]?\\[(.*)(\\])\\z/m,\n       /\\A%[Qq]?\\((.*)(\\))\\z/m,\n       /\\A%[Qq]?<(.*)(>)\\z/m;  '\"' + $1.unescape($2).escape('\"') + '\"'\n  when /\\A%[Qq]?(.)(.*)\\1\\z/m; '\"' + $2.unescape($1).escape('\"') + '\"'\n\n  # Handle shell escapes\n  when /\\A`(.*)`\\z/m;          \"%x{\" + $1.unescape(\"`\").escape(\"}\") + \"}\"\n  when /\\A%x\\{(.*)\\}\\z/m;      \"`\"   + $1.unescape(\"}\").escape(\"`\") + \"`\"\n\n  # Default case\n  else str\nend\n",
  "fallbackInput": "scope",
  "input": "selection",
  "keyEquivalent": "^\"",
  "name": "Toggle Quote Style",
  "output": "replaceSelectedText",
  "scope": "source.ruby string.quoted.double, source.ruby string.quoted.single, source.ruby string"
}
