{
  "beforeRunningCommand": "nop",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\n\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/ui.rb\"\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/textmate.rb\"\n\nREQUIRE_RE = /^\\s*(?:require|load)\\s*(['\"])([^'\"#]+?)(?:\\.rb)?\\1[ \\t]*$/\n\nDir.chdir(ENV['TM_DIRECTORY']) if ENV.has_key?('TM_DIRECTORY')\n\ngems_installed = begin\n                   require 'rubygems'\n                   true\n                 rescue LoadError\n                   false\n                 end\n\nrequires = if ENV['TM_CURRENT_LINE'].to_s =~ REQUIRE_RE\n             [\"#{$2}.rb\"]\n           else\n             $stdin.read.scan(REQUIRE_RE).map { |_, path| \"#{path}.rb\" }\n           end\nabort 'No includes found.' if requires.empty?\n\nfile = if requires.size > 1\n         choice = TextMate::UI.menu(requires) or exit\n         requires[choice]\n       else\n         requires.pop\n       end\ndir  = $LOAD_PATH.find { |dir| File.exist? File.join(dir, file) }\nif not dir and gems_installed and gem_spec = Gem::GemPathSearcher.new.find(file)\n  dir = File.join(gem_spec.full_gem_path, gem_spec.require_path)\nend\n\nif file and dir\n  dir.sub!(%r{\\A\\.(?=/|\\z)}, ENV['TM_DIRECTORY']) if ENV['TM_DIRECTORY']\n  file_path = File.join(dir, file)\n# puts file_path\n  TextMate.go_to :file => file_path\n  exit\nelse\n  puts \"File not found: #{file}\"\nend\n",
  "fallbackInput": "document",
  "input": "selection",
  "keyEquivalent": "@D",
  "name": "Open Require",
  "output": "showAsTooltip",
  "scope": "source.ruby"
}
