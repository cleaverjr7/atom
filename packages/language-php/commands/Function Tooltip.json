{
  "beforeRunningCommand": "nop",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -wKU\n\nSUPPORT = ENV['TM_SUPPORT_PATH']\nDIALOG = SUPPORT + '/bin/tm_dialog'\n\nrequire SUPPORT + '/lib/escape'\nrequire SUPPORT + '/lib/osx/plist'\n\nrequire ENV['TM_BUNDLE_SUPPORT'] + '/lib/php.rb'\nrequire ENV['TM_SUPPORT_PATH'] + '/lib/ui'\nrequire ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'\n\n# ENV['TM_BUNDLE_SUPPORT'] = '/Library/Application Support/TextMate/Bundles/PHP.tmbundle/Support/'\n# ENV['TM_CURRENT_LINE']   = 'dummy(array_merge(array(\"array\", \"number\", \"one\"), array(\"array2\")))'\n# ENV['TM_LINE_INDEX']     = '53'\n# \n# ENV['TM_CURRENT_LINE']   = \"date('Y-m-d', time() + ONE_MONTH)\"\n# ENV['TM_LINE_INDEX']     = '23'\n\nlang = ENV['LANG'] ? ENV['LANG'][0..2] : 'en'\n$fnFilename = ENV['TM_BUNDLE_SUPPORT'] + '/function-docs/' + lang + '.txt'\n\nif !File.exist?($fnFilename)\n  $fnFilename = ENV['TM_BUNDLE_SUPPORT'] + '/function-docs/en.txt'\nend\n\nclass String\n  def nbsp\n    gsub(' ', '&nbsp;')\n  end\nend\n\ndef show_function_and_exit(function, line = nil)\n  return unless function =~ /^[A-Za-z_][A-Za-z0-9_]*$/\n  functions = `grep -i '^#{function}%' \"#{$fnFilename}\"`.split(\"\\n\")\n  \n  if functions.size == 1\n    function, prototype, description = functions.pop.split('%')\n\n    function = PHPFunction.new(prototype)\n\n    params = function.params.map do |param|\n     html = ''\n     html << '<span class=\"type\">' + param[:type] + '</span> '.nbsp unless param[:type].to_s.empty?\n     html << param[:name]\n     unless param[:default].to_s.empty?\n       html << ' = '.nbsp + param[:default]\n     end\n     html = '<i>[' + html + ']</i>' if param[:optional]\n     html\n    end\n\n    if line\n      arg = 0\n      depth = 0\n      line.reverse.each_byte do |char|\n        if char == ?, and depth == 0\n          arg += 1\n        elsif char == ?(\n          depth -= 1 if depth > 0\n        elsif char == ?)\n          depth += 1\n        end\n      end\n      if arg < params.size\n        params[arg] = '<b>' + params[arg] + '</b>'\n      elsif not params.empty?\n        params[-1] = '<b>' + params[-1] + '</b>'\n      end\n    end\n    prototype = '<span class=\"type\">' + function.type + '</span> <span>'.nbsp + function.name + '</span>(' + params.join(', '.nbsp) + ')'\n    tip = <<-HTML\n      <style type=\"text/css\" media=\"screen\">\n          p {\n              margin: 0;\n          }\n          p.prototype span {\n              color: #00008B;\n          }\n          p.prototype i {\n              color: #666;\n          }\n          p.description {\n              font-size: smaller;\n          }\n          p.prototype span.type {\n            color: #006400;\n          }\n      </style>\n      <p class=\"prototype\">#{prototype}</p>\n      <p class=\"description\">#{description}</p>\n    HTML\n    TextMate::UI.tool_tip tip, :format => :html\n    exit\n  end\nend\n\nfunction = nil\n\nshow_function_and_exit(function = ENV['TM_CURRENT_WORD'].to_s)\n\nprefix = ENV['TM_CURRENT_LINE'][0..ENV['TM_LINE_INDEX'].to_i].reverse\n\n# Keep moving back a function call until we get a match and exit\nwhile prefix =~ /\\(\\s*(\\w+)/\n  show_function_and_exit(function = $1.reverse, ENV['TM_CURRENT_LINE'][($' + $&).length..ENV['TM_LINE_INDEX'].to_i - 1])\n  prefix = prefix[$&.length..-1]\nend\n\nshow_function_and_exit(function = $1) if ENV['TM_CURRENT_LINE'][0..ENV['TM_LINE_INDEX'].to_i] =~ /(\\w+)\\($/\n\nTextMate.exit_show_tool_tip \"Function not found: \" + function.to_s\n",
  "fallbackInput": "line",
  "input": "none",
  "inputFormat": "xml",
  "keyEquivalent": "~ïœ„",
  "name": "Documentation for Function Call (tool tip)",
  "output": "showAsTooltip",
  "scope": "source.php"
}
