{
  "beforeRunningCommand": "saveModifiedFiles",
  "command": "#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\n\n# TODO: Print stylesheet\n\nif RUBY_VERSION =~ /^1\\.6\\./ then\n  puts <<-HTML\n<p>Sorry, but this function requires Ruby 1.8.</p>\n<p>If you do have Ruby 1.8 installed (default for Tiger users) then you need to setup the path variable in <tt> ~/.MacOSX/environment.plist</tt>.</p>\n<p>For detailed instructions see <a href=\"http://macromates.com/textmate/manual/shell_commands#search_path\">the manual</a> (scroll down to the paragraph starting with <em>Important</em>.)</p>\nHTML\n  abort\nend\n\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/web_preview\"\n\nif ARGV.size > 0\n  if ARGV[0] == 'dir'\n    ENV['TM_SELECTED_FILES'] = \"\"\n    ENV['TM_PROJECT_DIRECTORY'] = File.dirname ENV['TM_FILEPATH']\n  elsif ARGV[0] == 'project'\n    ENV['TM_SELECTED_FILES'] = \"\"\n  end\nend\n\nif ENV['TM_PROJECT_DIRECTORY'] == '/'\n  puts html_head(:window_title => \"TODO\", :page_title => \"TODO List\", :sub_title => \"Error\")\n  puts <<-HTML\n<p>Warning: Your project directory is the root directory!</p>\n<p>This is problably because you have symbolic links or file references inside your project so that the most common directory of all the files in the project resolves to `/` (root).</p>\n<p>Aborting.</p>\nHTML\n  abort\nend\n\nrequire \"#{ENV['TM_BUNDLE_SUPPORT']}/lib/settings.rb\"\nrequire \"#{ENV['TM_SUPPORT_PATH']}/lib/textmate\"\nrequire \"erb\"\nrequire \"yaml\"\ninclude ERB::Util\n\ntags = Settings.markers.map { |marker|\n  { :label => marker.name,\n    :color => marker.has_color? ? marker.color : '#808080',\n    :regexp => marker.regexp,\n    :trim_if_empty => marker.trim?\n  }\n}\nignores = ENV['TM_TODO_IGNORE']\n\ndef TextMate.file_link (file, line = 0)\n  return \"txmt://open/?url=file://\" +\n    file.gsub(/([^a-zA-Z0-9.-\\/]+)/) { '%' + $1.unpack('H2' * $1.size).join('%').upcase } +\n    \"&amp;line=\" + line.to_s\nend\n\ntags.each do |tag|\n  tag[:matches] = []\n  tag[:rendered] = ''\nend\n\nhtml_head = ERB.new(File.read(\"#{ENV['TM_BUNDLE_SUPPORT']}/template_html_header.rhtml\"), 0, '<>').result(binding)\n\nputs html_head(:window_title => \"TODO\", :page_title => \"TODO List\", :sub_title => ENV['TM_PROJECT_DIRECTORY'], :html_head => html_head)\n\nputs ERB.new(File.read(\"#{ENV['TM_BUNDLE_SUPPORT']}/template_head.rhtml\"), 0, '<>').result(binding)\n\nSTDOUT.flush\n\nproject_dir = ENV['TM_PROJECT_DIRECTORY'] || \"\"\nhome_dir = /^#{Regexp.escape ENV['HOME']}/\ntotal = 0\nTextMate.each_text_file do |file|\n  next if (ignores != nil and file =~ /#{ignores}/) or File.symlink?(file)\n  file_name = file.sub(home_dir, '~')\n  puts ERB.new(File.read(\"#{ENV['TM_BUNDLE_SUPPORT']}/template_update_dir.rhtml\"), 0, '<>').result(binding)\n  tags.each do |tag|\n    File.open(file) do |io|\n      io.grep(tag[:regexp]) do |content|\n        match = {\n          :file => file,\n          :line => io.lineno,\n          :content => content,\n          :type => tag[:label],\n          :rendered => '',\n          :index => tag[:matches].length\n        }\n\n        part = $1 or next\n\n        if tag[:label] == \"RADAR\" then\n          url, display = (ENV['TM_RDAR_URL'] || \"http://openradar.appspot.com/\") + $2, \"rdar://\" + $2\n          match[:match] = html_escape($1) + \"<a href=\\\"\" + url + \"\\\" target=\\\"_blank\\\">\" + html_escape(display) + \"</a>\" + html_escape($3)\n        else\n          match[:match] = html_escape(part)\n        end\n        match[:clean] = part.gsub(/\\s+/, \" \").gsub(/[^\\w@`~!@#\\$%\\^&*\\(\\)-=+\\[\\]|\\\\\\'\\\"\\{\\}<>,.\\/\\? ]/i, \"\")\n\n        tag[:matches] << match\n        count = tag[:matches].length\n        total += 1\n        puts ERB.new(File.read(\"#{ENV['TM_BUNDLE_SUPPORT']}/template_update.rhtml\"), 0, '<>').result(binding)\n        match[:rendered] = ERB.new(File.read(\"#{ENV['TM_BUNDLE_SUPPORT']}/template_item.rhtml\"), 0, '<>').result binding\n        tag[:rendered] += match[:rendered]\n        STDOUT.flush\n      end\n    end if File.readable?(file)\n  end\nend\n\ntmpl_file = \"#{ENV['TM_BUNDLE_SUPPORT']}/template_tail.rhtml\"\nputs ERB.new(File.read(tmpl_file), 0, '<>').result(binding)\n\nhtml_footer()\n",
  "input": "none",
  "keyEquivalent": "^T",
  "name": "Show TODO List",
  "output": "showAsHTML"
}
